// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: src/main/java/com/alex/compis/jflex/archivo.flex

package com.alex.compis;
import java.io.*;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Proyecto {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\4\0\1\6\1\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\13\1\15\1\16\12\17\1\20\1\21\1\0"+
    "\1\22\3\0\1\23\1\24\2\25\1\26\14\25\1\27"+
    "\10\25\3\0\1\6\1\30\1\0\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\36\1\40\2\36\1\41"+
    "\1\42\1\43\1\44\1\45\1\36\1\46\1\47\1\50"+
    "\1\51\1\52\1\36\1\53\1\36\1\54\12\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\3\1\7\1\10\1\11\1\7\7\12\1\0"+
    "\1\13\2\0\1\14\1\0\11\12\3\0\1\15\12\12"+
    "\1\16\1\17\25\12\1\0\2\12\1\0\6\12\6\20"+
    "\1\12\1\0\1\21\1\0\4\12\1\0\1\22\1\7"+
    "\6\20\1\0\1\23\2\24\1\12\2\0\1\7\2\12"+
    "\1\7\6\20\2\25\2\7\1\24\3\0\1\12\4\20"+
    "\1\7\1\25\1\23\2\24\1\26\2\0\1\7\1\12"+
    "\2\20\1\22\1\20\2\25\1\24\3\0\1\12\2\20"+
    "\1\7\1\20\1\25\1\24\4\0\2\20\1\7\1\20"+
    "\1\25\1\24\4\0\1\20\1\7\1\25\1\24\4\0"+
    "\1\20\1\7\1\25\1\24\4\0\1\20\1\0\1\25"+
    "\1\24\1\27\3\0\1\20\1\0\1\25\1\24\3\0"+
    "\1\22\1\30\1\25\1\24\2\0\1\7\1\25\1\24"+
    "\1\7\1\25\1\24\1\7\1\25\1\22\1\7\1\25"+
    "\2\7\1\22\4\7\1\0\2\7\1\0\2\7\1\31"+
    "\3\7\1\0\1\7\2\0\1\32\1\0\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\55\0\207\0\55\0\264\0\55"+
    "\0\55\0\55\0\341\0\u010e\0\55\0\55\0\u013b\0\u0168"+
    "\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3\0\55"+
    "\0\264\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de"+
    "\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546"+
    "\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae"+
    "\0\u06db\0\u0708\0\u0735\0\55\0\u0546\0\u0762\0\u078f\0\u07bc"+
    "\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924"+
    "\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c"+
    "\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4"+
    "\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c"+
    "\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4"+
    "\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c"+
    "\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194"+
    "\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\55\0\u12a2\0\u12cf"+
    "\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437"+
    "\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f"+
    "\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da\0\u1707"+
    "\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f"+
    "\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7"+
    "\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f"+
    "\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7"+
    "\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\u1de2\0\u1e0f"+
    "\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a\0\u1f77"+
    "\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b\0\u2058\0\u2085\0\55\0\u20b2"+
    "\0\u20df\0\u210c\0\u2139\0\u2166\0\u2193\0\u21c0\0\u21ed\0\u221a"+
    "\0\u2247\0\u2274\0\55\0\u22a1\0\u22ce\0\u22fb\0\u2328\0\u2355"+
    "\0\u2382\0\u23af\0\u23dc\0\u2409\0\u2436\0\u2463\0\u2490\0\u24bd"+
    "\0\u24ea\0\u2517\0\u2544\0\u2571\0\u259e\0\u25cb\0\u25f8\0\u2625"+
    "\0\u2652\0\u267f\0\u26ac\0\u26d9\0\u2706\0\u2733\0\u2760\0\55"+
    "\0\u278d\0\u27ba\0\u27e7\0\u2814\0\u2841\0\u286e\0\u289b\0\55"+
    "\0\u28c8\0\55";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\3\1\6\1\7\1\10"+
    "\1\11\2\6\1\2\1\12\1\13\1\14\1\2\1\15"+
    "\1\16\5\17\1\2\1\20\1\21\1\22\1\20\1\23"+
    "\4\20\1\24\2\20\1\25\1\26\6\20\57\0\1\27"+
    "\2\0\1\27\51\0\1\2\61\0\1\30\7\0\1\31"+
    "\3\0\5\31\1\0\24\31\12\0\1\32\3\0\1\33"+
    "\53\0\1\34\1\0\1\14\3\0\32\17\17\0\1\17"+
    "\3\0\32\17\17\0\1\20\3\0\32\20\17\0\1\20"+
    "\3\0\21\20\1\35\10\20\17\0\1\20\3\0\6\20"+
    "\1\36\7\20\1\37\13\20\17\0\1\20\3\0\20\20"+
    "\1\40\7\20\1\41\1\20\17\0\1\20\3\0\12\20"+
    "\1\42\17\20\17\0\1\20\3\0\23\20\1\43\2\20"+
    "\1\44\3\20\17\0\1\20\3\0\12\20\1\45\17\20"+
    "\2\0\1\46\2\0\1\46\50\0\2\32\1\0\2\32"+
    "\4\0\1\47\1\32\2\0\1\50\1\32\3\0\32\32"+
    "\2\0\1\33\2\0\2\33\3\0\2\33\2\0\2\33"+
    "\3\0\5\33\1\0\24\33\17\0\1\51\54\0\1\20"+
    "\3\0\16\20\1\52\13\20\17\0\1\20\3\0\11\20"+
    "\1\53\20\20\17\0\1\20\3\0\6\20\1\54\23\20"+
    "\17\0\1\20\3\0\25\20\1\55\4\20\17\0\1\20"+
    "\3\0\25\20\1\56\4\20\17\0\1\20\3\0\25\20"+
    "\1\57\4\20\17\0\1\20\3\0\15\20\1\60\3\20"+
    "\1\61\10\20\17\0\1\20\3\0\7\20\1\62\22\20"+
    "\17\0\1\20\3\0\6\20\1\63\23\20\2\0\1\64"+
    "\2\0\1\64\50\0\2\32\1\0\2\32\4\0\1\47"+
    "\1\32\2\0\1\65\1\32\3\0\32\32\12\0\1\32"+
    "\57\0\1\34\1\0\1\51\54\0\1\20\3\0\12\20"+
    "\1\66\17\20\17\0\1\20\3\0\12\20\1\67\17\20"+
    "\17\0\1\20\3\0\24\20\1\70\5\20\17\0\1\20"+
    "\3\0\12\20\1\71\17\20\17\0\1\20\3\0\15\20"+
    "\1\72\14\20\17\0\1\20\3\0\21\20\1\73\10\20"+
    "\17\0\1\20\3\0\27\20\1\74\2\20\17\0\1\20"+
    "\3\0\22\20\1\75\2\20\1\76\4\20\17\0\1\20"+
    "\3\0\16\20\1\77\13\20\17\0\1\20\3\0\16\20"+
    "\1\100\13\20\17\0\1\20\3\0\6\20\1\101\23\20"+
    "\17\0\1\20\3\0\20\20\1\102\11\20\17\0\1\20"+
    "\3\0\12\20\1\103\17\20\17\0\1\20\3\0\23\20"+
    "\1\104\6\20\17\0\1\20\3\0\12\20\1\105\17\20"+
    "\17\0\1\20\3\0\11\20\1\106\20\20\17\0\1\20"+
    "\3\0\6\20\1\107\23\20\17\0\1\20\3\0\15\20"+
    "\1\110\14\20\17\0\1\20\3\0\12\20\1\111\17\20"+
    "\17\0\1\20\3\0\15\20\1\112\14\20\2\0\1\113"+
    "\2\0\1\113\11\0\1\20\3\0\32\20\17\0\1\20"+
    "\3\0\20\20\1\114\11\20\17\0\1\20\3\0\6\20"+
    "\1\115\23\20\2\0\1\116\2\0\1\116\11\0\1\20"+
    "\3\0\32\20\17\0\1\20\3\0\21\20\1\117\10\20"+
    "\17\0\1\20\3\0\20\20\1\120\11\20\17\0\1\20"+
    "\3\0\21\20\1\121\10\20\17\0\1\20\3\0\11\20"+
    "\1\122\20\20\17\0\1\20\3\0\12\20\1\123\17\20"+
    "\17\0\1\20\3\0\14\20\1\124\15\20\17\0\1\20"+
    "\3\0\10\20\1\122\21\20\31\0\2\125\1\126\5\125"+
    "\1\127\4\125\1\130\1\131\1\132\4\125\17\0\1\20"+
    "\3\0\21\20\1\133\10\20\2\0\1\134\2\0\1\134"+
    "\11\0\1\20\3\0\32\20\23\0\5\135\1\0\24\17"+
    "\2\0\1\136\2\0\1\136\11\0\1\20\3\0\32\20"+
    "\17\0\1\20\3\0\11\20\1\137\20\20\17\0\1\20"+
    "\3\0\24\20\1\140\5\20\17\0\1\20\3\0\6\20"+
    "\1\141\23\20\17\0\1\20\3\0\11\20\1\142\20\20"+
    "\17\0\1\20\3\0\15\20\1\107\14\20\2\0\1\143"+
    "\2\0\1\143\2\0\1\144\3\0\1\145\2\0\1\125"+
    "\3\0\32\125\2\0\1\143\2\0\1\143\2\0\1\144"+
    "\3\0\1\145\2\0\1\125\3\0\6\125\1\146\12\125"+
    "\1\147\10\125\2\0\1\143\2\0\1\143\2\0\1\144"+
    "\3\0\1\145\2\0\1\125\3\0\21\125\1\150\10\125"+
    "\2\0\1\143\2\0\1\143\2\0\1\144\3\0\1\145"+
    "\2\0\1\125\3\0\6\125\1\151\23\125\2\0\1\143"+
    "\2\0\1\143\2\0\1\144\3\0\1\145\2\0\1\125"+
    "\3\0\12\125\1\152\17\125\2\0\1\143\2\0\1\143"+
    "\2\0\1\144\3\0\1\145\2\0\1\125\3\0\6\125"+
    "\1\153\23\125\2\0\1\154\2\0\1\154\11\0\1\20"+
    "\3\0\32\20\31\0\24\155\17\0\1\135\3\0\32\135"+
    "\31\0\2\156\1\157\21\156\17\0\1\20\3\0\12\20"+
    "\1\160\17\20\2\0\1\161\2\0\1\162\11\0\1\163"+
    "\3\0\5\163\1\20\24\163\17\0\1\20\3\0\24\20"+
    "\1\164\5\20\17\0\1\20\3\0\6\20\1\165\23\20"+
    "\10\0\1\144\60\0\1\166\14\0\24\17\31\0\24\167"+
    "\2\0\1\143\2\0\1\143\2\0\1\144\3\0\1\145"+
    "\2\0\1\125\3\0\11\125\1\170\20\125\2\0\1\143"+
    "\2\0\1\143\2\0\1\144\3\0\1\145\2\0\1\125"+
    "\3\0\24\125\1\131\5\125\2\0\1\143\2\0\1\143"+
    "\2\0\1\144\3\0\1\145\2\0\1\125\3\0\14\125"+
    "\1\171\15\125\2\0\1\143\2\0\1\143\2\0\1\144"+
    "\3\0\1\145\2\0\1\125\3\0\15\125\1\172\14\125"+
    "\2\0\1\143\2\0\1\143\2\0\1\144\3\0\1\145"+
    "\2\0\1\125\3\0\20\125\1\173\11\125\2\0\1\143"+
    "\2\0\1\143\2\0\1\144\3\0\1\145\2\0\1\125"+
    "\3\0\20\125\1\174\11\125\31\0\2\175\1\176\21\175"+
    "\2\0\1\143\2\0\1\143\2\0\1\144\3\0\1\177"+
    "\2\0\1\155\3\0\32\155\2\0\1\143\2\0\1\143"+
    "\2\0\1\144\3\0\1\200\2\0\1\156\3\0\32\156"+
    "\2\0\1\143\2\0\1\143\2\0\1\144\3\0\1\200"+
    "\2\0\1\156\3\0\6\156\1\201\23\156\2\0\1\202"+
    "\2\0\1\202\11\0\1\20\3\0\32\20\23\0\5\17"+
    "\50\0\5\17\15\0\1\203\26\0\1\163\3\0\5\163"+
    "\1\20\24\163\17\0\1\20\1\204\2\0\32\20\17\0"+
    "\1\20\3\0\11\20\1\205\20\20\14\0\1\145\2\0"+
    "\1\167\3\0\32\167\2\0\1\143\2\0\1\143\2\0"+
    "\1\144\3\0\1\145\2\0\1\125\3\0\12\125\1\206"+
    "\17\125\2\0\1\143\2\0\1\143\2\0\1\144\3\0"+
    "\1\145\2\0\1\125\3\0\6\125\1\207\23\125\2\0"+
    "\1\143\2\0\1\143\2\0\1\144\3\0\1\145\2\0"+
    "\1\125\3\0\31\125\1\210\2\0\1\143\2\0\1\143"+
    "\2\0\1\144\3\0\1\145\2\0\1\125\3\0\21\125"+
    "\1\210\10\125\2\0\1\143\2\0\1\143\2\0\1\144"+
    "\3\0\1\145\2\0\1\125\3\0\14\125\1\211\15\125"+
    "\2\0\1\143\2\0\1\143\2\0\1\144\3\0\1\212"+
    "\2\0\1\175\3\0\32\175\2\0\1\143\2\0\1\143"+
    "\2\0\1\144\3\0\1\212\2\0\1\175\3\0\6\175"+
    "\1\213\23\175\31\0\24\214\31\0\24\215\2\0\1\143"+
    "\2\0\1\143\2\0\1\144\3\0\1\200\2\0\1\156"+
    "\3\0\11\156\1\216\20\156\23\0\5\217\1\0\24\17"+
    "\46\0\1\220\2\0\1\221\4\0\2\166\1\0\1\222"+
    "\1\166\66\0\1\20\3\0\12\20\1\223\17\20\2\0"+
    "\1\143\2\0\1\143\2\0\1\144\3\0\1\145\2\0"+
    "\1\125\3\0\20\125\1\224\11\125\2\0\1\143\2\0"+
    "\1\143\2\0\1\144\3\0\1\145\2\0\1\125\3\0"+
    "\23\125\1\225\6\125\2\0\1\143\2\0\1\143\2\0"+
    "\1\226\3\0\1\145\2\0\1\125\3\0\32\125\2\0"+
    "\1\143\2\0\1\143\2\0\1\144\3\0\1\145\2\0"+
    "\1\125\3\0\12\125\1\227\17\125\31\0\24\230\2\0"+
    "\1\143\2\0\1\143\2\0\1\144\3\0\1\212\2\0"+
    "\1\175\3\0\11\175\1\231\20\175\14\0\1\177\2\0"+
    "\1\214\3\0\32\214\14\0\1\200\2\0\1\215\3\0"+
    "\32\215\2\0\1\143\2\0\1\143\2\0\1\144\3\0"+
    "\1\200\2\0\1\156\3\0\12\156\1\232\17\156\17\0"+
    "\1\217\3\0\32\217\40\0\1\233\3\0\1\234\42\0"+
    "\1\235\24\0\1\166\71\0\1\20\3\0\24\20\1\236"+
    "\5\20\2\0\1\143\2\0\1\143\2\0\1\144\3\0"+
    "\1\145\2\0\1\125\3\0\6\125\1\237\23\125\2\0"+
    "\1\143\2\0\1\143\2\0\1\144\3\0\1\145\2\0"+
    "\1\125\3\0\15\125\1\240\14\125\14\0\1\166\14\0"+
    "\15\17\1\241\6\17\2\0\1\143\2\0\1\143\2\0"+
    "\1\144\3\0\1\145\2\0\1\125\3\0\20\125\1\242"+
    "\11\125\14\0\1\212\2\0\1\230\3\0\32\230\2\0"+
    "\1\143\2\0\1\143\2\0\1\144\3\0\1\212\2\0"+
    "\1\175\3\0\12\175\1\243\17\175\2\0\1\143\2\0"+
    "\1\143\2\0\1\144\3\0\1\200\2\0\1\156\3\0"+
    "\20\156\1\244\11\156\52\0\1\245\52\0\1\246\45\0"+
    "\1\247\15\0\1\161\2\0\1\250\11\0\1\163\3\0"+
    "\5\163\1\20\24\163\2\0\1\143\2\0\1\143\2\0"+
    "\1\144\3\0\1\145\2\0\1\125\3\0\1\251\31\125"+
    "\2\0\1\143\2\0\1\143\2\0\1\144\3\0\1\145"+
    "\2\0\1\125\3\0\25\125\1\252\4\125\17\0\1\17"+
    "\3\0\12\17\1\253\17\17\2\0\1\143\2\0\1\143"+
    "\2\0\1\144\3\0\1\145\2\0\1\125\3\0\25\125"+
    "\1\254\4\125\2\0\1\143\2\0\1\143\2\0\1\144"+
    "\3\0\1\212\2\0\1\175\3\0\20\175\1\255\11\175"+
    "\2\0\1\143\2\0\1\143\2\0\1\144\3\0\1\200"+
    "\2\0\1\156\3\0\6\156\1\256\23\156\31\0\1\257"+
    "\60\0\1\260\57\0\1\261\37\0\5\17\15\0\1\262"+
    "\11\0\1\143\2\0\1\143\2\0\1\144\3\0\1\145"+
    "\2\0\1\125\3\0\4\125\1\263\25\125\2\0\1\143"+
    "\2\0\1\143\2\0\1\144\3\0\1\145\2\0\1\125"+
    "\3\0\17\125\1\173\12\125\17\0\1\17\3\0\6\17"+
    "\1\264\23\17\2\0\1\143\2\0\1\143\2\0\1\144"+
    "\3\0\1\145\2\0\1\125\3\0\12\125\1\210\17\125"+
    "\2\0\1\143\2\0\1\143\2\0\1\144\3\0\1\212"+
    "\2\0\1\175\3\0\6\175\1\265\23\175\2\0\1\143"+
    "\2\0\1\143\2\0\1\144\3\0\1\200\2\0\1\156"+
    "\3\0\1\266\31\156\34\0\1\267\57\0\1\270\50\0"+
    "\1\267\67\0\1\271\2\0\1\272\5\0\1\143\2\0"+
    "\1\143\2\0\1\144\3\0\1\145\2\0\1\125\3\0"+
    "\12\125\1\273\17\125\17\0\1\17\3\0\16\17\1\274"+
    "\13\17\2\0\1\143\2\0\1\143\2\0\1\144\3\0"+
    "\1\212\2\0\1\175\3\0\1\275\31\175\2\0\1\143"+
    "\2\0\1\143\2\0\1\144\3\0\1\200\2\0\1\156"+
    "\3\0\3\156\1\276\26\156\44\0\1\277\50\0\1\257"+
    "\54\0\1\300\3\0\1\301\42\0\1\302\24\0\1\143"+
    "\2\0\1\143\2\0\1\144\3\0\1\145\2\0\1\125"+
    "\3\0\6\125\1\303\23\125\2\0\1\304\2\0\1\304"+
    "\11\0\1\17\3\0\32\17\2\0\1\143\2\0\1\143"+
    "\2\0\1\144\3\0\1\212\2\0\1\175\3\0\1\175"+
    "\1\305\30\175\2\0\1\143\2\0\1\143\2\0\1\144"+
    "\3\0\1\200\2\0\1\156\3\0\20\156\1\306\11\156"+
    "\47\0\1\307\57\0\1\310\52\0\1\311\45\0\1\312"+
    "\15\0\1\143\2\0\1\143\2\0\1\144\3\0\1\145"+
    "\2\0\1\125\3\0\16\125\1\313\13\125\31\0\24\314"+
    "\2\0\1\143\2\0\1\143\2\0\1\144\3\0\1\212"+
    "\2\0\1\175\3\0\21\175\1\315\10\175\2\0\1\143"+
    "\2\0\1\143\2\0\1\144\3\0\1\200\2\0\1\156"+
    "\3\0\25\156\1\316\4\156\31\0\1\317\60\0\1\320"+
    "\57\0\1\321\16\0\1\143\2\0\1\143\2\0\1\322"+
    "\3\0\1\145\2\0\1\125\3\0\32\125\11\0\1\323"+
    "\5\0\1\314\3\0\32\314\2\0\1\143\2\0\1\143"+
    "\2\0\1\144\3\0\1\212\2\0\1\175\3\0\16\175"+
    "\1\324\13\175\2\0\1\143\2\0\1\143\2\0\1\144"+
    "\3\0\1\200\2\0\1\156\3\0\12\156\1\325\17\156"+
    "\34\0\1\326\57\0\1\327\50\0\1\326\35\0\1\166"+
    "\14\0\2\17\1\330\21\17\2\0\1\143\2\0\1\143"+
    "\2\0\1\144\3\0\1\212\2\0\1\175\3\0\12\175"+
    "\1\331\17\175\2\0\1\143\2\0\1\143\2\0\1\144"+
    "\3\0\1\200\2\0\1\156\3\0\23\156\1\332\6\156"+
    "\31\0\1\277\63\0\1\317\33\0\1\17\3\0\6\17"+
    "\1\333\23\17\2\0\1\143\2\0\1\143\2\0\1\144"+
    "\3\0\1\212\2\0\1\175\3\0\6\175\1\334\23\175"+
    "\2\0\1\143\2\0\1\143\2\0\1\144\3\0\1\200"+
    "\2\0\1\156\3\0\21\156\1\335\10\156\17\0\1\17"+
    "\3\0\11\17\1\336\20\17\2\0\1\143\2\0\1\143"+
    "\2\0\1\144\3\0\1\212\2\0\1\175\3\0\20\175"+
    "\1\337\11\175\2\0\1\143\2\0\1\143\2\0\1\340"+
    "\3\0\1\200\2\0\1\156\3\0\32\156\17\0\1\17"+
    "\3\0\12\17\1\341\17\17\2\0\1\143\2\0\1\143"+
    "\2\0\1\144\3\0\1\212\2\0\1\175\3\0\21\175"+
    "\1\342\10\175\14\0\1\166\14\0\2\17\1\343\21\17"+
    "\17\0\1\17\3\0\20\17\1\344\11\17\2\0\1\143"+
    "\2\0\1\143\2\0\1\345\3\0\1\212\2\0\1\175"+
    "\3\0\32\175\17\0\1\17\3\0\6\17\1\346\23\17"+
    "\17\0\1\17\3\0\6\17\1\347\23\17\14\0\1\166"+
    "\14\0\2\17\1\350\21\17\17\0\1\17\3\0\11\17"+
    "\1\351\20\17\2\0\1\352\2\0\1\352\11\0\1\17"+
    "\3\0\32\17\17\0\1\17\3\0\6\17\1\353\23\17"+
    "\17\0\1\17\3\0\12\17\1\354\17\17\31\0\24\355"+
    "\17\0\1\17\3\0\11\17\1\356\20\17\17\0\1\17"+
    "\3\0\20\17\1\357\11\17\11\0\1\360\5\0\1\355"+
    "\3\0\32\355\17\0\1\17\3\0\12\17\1\361\17\17"+
    "\17\0\1\17\3\0\6\17\1\362\23\17\17\0\1\17"+
    "\3\0\20\17\1\363\11\17\2\0\1\364\2\0\1\364"+
    "\11\0\1\17\3\0\32\17\17\0\1\17\3\0\6\17"+
    "\1\365\23\17\31\0\24\366\2\0\1\367\2\0\1\367"+
    "\11\0\1\17\3\0\32\17\11\0\1\370\5\0\1\366"+
    "\3\0\32\366\31\0\24\371\11\0\1\372\5\0\1\371"+
    "\3\0\32\371";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10485];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\1\1\3\11"+
    "\2\1\2\11\10\1\1\0\1\11\2\0\1\1\1\0"+
    "\11\1\3\0\13\1\1\11\26\1\1\0\2\1\1\0"+
    "\15\1\1\0\1\1\1\0\4\1\1\0\10\1\1\0"+
    "\4\1\2\0\3\1\1\11\13\1\3\0\13\1\2\0"+
    "\11\1\3\0\7\1\4\0\6\1\4\0\4\1\4\0"+
    "\4\1\4\0\1\1\1\0\2\1\1\11\3\0\1\1"+
    "\1\0\2\1\3\0\1\1\1\11\2\1\2\0\22\1"+
    "\1\0\2\1\1\0\2\1\1\11\3\1\1\0\1\1"+
    "\2\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Proyecto(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 28: break;
          case 2:
            { System.out.print(yytext());
            }
            // fall through
          case 29: break;
          case 3:
            { System.out.println("encontre un operando aritmetico " + yytext());
            }
            // fall through
          case 30: break;
          case 4:
            { System.out.println("encontre un parentesis abierto" + yytext());
            }
            // fall through
          case 31: break;
          case 5:
            { System.out.println("encontre un parentesis cerrado" + yytext());
            }
            // fall through
          case 32: break;
          case 6:
            { System.out.println("encontre un punto " + yytext());
            }
            // fall through
          case 33: break;
          case 7:
            { System.out.println("Se encontro un error " + yytext());
            }
            // fall through
          case 34: break;
          case 8:
            { System.out.println("encontre un punto y coma " + yytext());
            }
            // fall through
          case 35: break;
          case 9:
            { System.out.println("encontre un Operando =  " + yytext());
            }
            // fall through
          case 36: break;
          case 10:
            { System.out.println("encontre un identificador  " + yytext());
            }
            // fall through
          case 37: break;
          case 11:
            { System.out.println("encontre una cadena de texto " + yytext());
            }
            // fall through
          case 38: break;
          case 12:
            { System.out.println("encontre un comentario de una linea " + yytext());
            }
            // fall through
          case 39: break;
          case 13:
            { System.out.println("encontre un numero Real " + yytext());
            }
            // fall through
          case 40: break;
          case 14:
            { System.out.println("encontre una tabulacion");
            }
            // fall through
          case 41: break;
          case 15:
            { System.out.println("encontre un comentario de varias lineas " + yytext());
            }
            // fall through
          case 42: break;
          case 16:
            { System.out.println("encontre un Real " + yytext());
            }
            // fall through
          case 43: break;
          case 17:
            { System.out.println("encontre una clase " + yytext());
    System.out.println("encontre un identificador " + yytext());
            }
            // fall through
          case 44: break;
          case 18:
            { System.out.println("encontre una funcion " + yytext());  
    System.out.println("encontre un parentesis " + yytext());
    System.out.println("encontre una Identificador " + yytext());
            }
            // fall through
          case 45: break;
          case 19:
            { System.out.println("encontre una cadena " + yytext());
            }
            // fall through
          case 46: break;
          case 20:
            { System.out.println("encontre un entero ");
    String caden = yytext();
    caden = caden.substring(7,caden.length()-1);
    System.out.println(caden);
            }
            // fall through
          case 47: break;
          case 21:
            { System.out.println("encontre un boleano " + yytext());
            }
            // fall through
          case 48: break;
          case 22:
            { System.out.println("encontre un extiende " + yytext());
    System.out.println("encontre un identificador " + yytext());
            }
            // fall through
          case 49: break;
          case 23:
            { System.out.println("encontre una palabra reservada " + yytext());
            }
            // fall through
          case 50: break;
          case 24:
            { System.out.println("encontre una funcion Aritmetica REAL " + yytext());  
    System.out.println("encontre una palabra reservada" + yytext());
    System.out.println("encontre un parentesis " + yytext());
    System.out.println("encontre un IDENTIFICADOR " + yytext());
            }
            // fall through
          case 51: break;
          case 25:
            { System.out.println("encontre una funcion especial REAL " + yytext());  
    System.out.println("encontre un identificador" + yytext());
    System.out.println("encontre un parentesis " + yytext());
    System.out.println("encontre un IDENTIFICADOR " + yytext());
            }
            // fall through
          case 52: break;
          case 26:
            { System.out.println("encontre una funcion especial ENTERA " + yytext());  
    System.out.println("encontre una palabra reservada" + yytext());
    System.out.println("encontre un IDENTIFICADOR" + yytext());
    System.out.println("encontre un parentesis " + yytext());
            }
            // fall through
          case 53: break;
          case 27:
            { System.out.println("encontre una funcion especial BOLEANA " + yytext());  
    System.out.println("encontre una palabra reservada" + yytext());
    System.out.println("encontre un parentesis " + yytext());
    System.out.println("encontre un IDENTIFICADOR " + yytext());
            }
            // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Proyecto [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Proyecto scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Proyecto(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
