// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: src/main/java/com/alex/compis/jflex/archivo.flex

package com.alex.compis;
import java.io.*;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Proyecto {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\4\0\1\6\1\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\13\1\15\1\16\12\17\1\20\1\21\1\0"+
    "\1\22\3\0\1\23\1\24\2\25\1\26\7\25\1\27"+
    "\2\25\1\30\1\25\1\31\10\25\3\0\1\6\1\32"+
    "\1\0\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\2\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\44\1\52\1\53\1\54\1\55\1\56\1\44\1\57"+
    "\1\44\1\60\12\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\3\1\7\1\10\1\11\20\12\1\0\1\13"+
    "\2\0\1\14\1\0\1\7\22\12\1\15\1\12\3\0"+
    "\1\16\25\12\1\17\1\20\14\12\1\15\31\12\1\0"+
    "\5\12\1\0\12\12\6\21\1\12\1\7\2\12\1\0"+
    "\1\22\1\12\1\0\5\12\1\0\1\23\1\7\6\21"+
    "\2\12\1\0\1\24\1\12\2\25\1\12\2\0\1\7"+
    "\2\12\1\7\6\21\1\12\2\26\1\7\1\12\1\7"+
    "\1\25\3\0\1\12\4\21\1\7\1\26\1\24\2\25"+
    "\1\27\2\0\1\7\1\12\2\21\1\23\1\21\2\26"+
    "\1\25\3\0\1\12\2\21\1\7\1\21\1\26\1\25"+
    "\4\0\2\21\1\7\1\21\1\26\1\25\4\0\1\21"+
    "\1\7\1\26\1\25\4\0\1\21\1\7\1\26\1\25"+
    "\4\0\1\21\1\0\1\26\1\25\1\15\3\0\1\21"+
    "\1\0\1\26\1\25\3\0\1\23\1\30\1\26\1\25"+
    "\2\0\1\7\1\26\1\25\1\7\1\26\1\25\1\7"+
    "\1\26\1\23\1\7\1\26\2\7\1\23\4\7\1\0"+
    "\2\7\1\0\2\7\1\31\3\7\1\0\1\7\2\0"+
    "\1\32\1\0\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\61\0\223\0\61\0\304\0\61"+
    "\0\61\0\61\0\365\0\u0126\0\61\0\61\0\u0157\0\u0188"+
    "\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df\0\u0310"+
    "\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467\0\61"+
    "\0\304\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be"+
    "\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746"+
    "\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce"+
    "\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56"+
    "\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde"+
    "\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66"+
    "\0\u0d97\0\u0dc8\0\61\0\u0992\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c"+
    "\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014"+
    "\0\u0157\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b"+
    "\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3"+
    "\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b"+
    "\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603"+
    "\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b"+
    "\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913"+
    "\0\u1944\0\u1975\0\u0157\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a"+
    "\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2"+
    "\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a"+
    "\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02"+
    "\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\61\0\u1ff7\0\u2028\0\u2059"+
    "\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1"+
    "\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369"+
    "\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1"+
    "\0\u2522\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679"+
    "\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801"+
    "\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989"+
    "\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11"+
    "\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99"+
    "\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21"+
    "\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47\0\u2f78\0\61"+
    "\0\u2fa9\0\u2fda\0\u300b\0\u303c\0\u306d\0\u309e\0\u30cf\0\u3100"+
    "\0\u3131\0\u3162\0\u3193\0\61\0\u31c4\0\u31f5\0\u3226\0\u3257"+
    "\0\u3288\0\u32b9\0\u32ea\0\u331b\0\u334c\0\u337d\0\u33ae\0\u33df"+
    "\0\u3410\0\u3441\0\u3472\0\u34a3\0\u34d4\0\u3505\0\u3536\0\u3567"+
    "\0\u3598\0\u35c9\0\u35fa\0\u362b\0\u365c\0\u368d\0\u36be\0\u36ef"+
    "\0\61\0\u3720\0\u3751\0\u3782\0\u37b3\0\u37e4\0\u3815\0\u3846"+
    "\0\61\0\u3877\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\3\1\6\1\7\1\10"+
    "\1\11\2\6\1\2\1\12\1\13\1\14\1\2\1\15"+
    "\1\16\4\17\1\20\1\21\1\17\1\2\1\17\1\22"+
    "\1\23\1\24\1\25\1\26\1\17\1\27\1\30\1\17"+
    "\1\31\1\32\2\17\1\33\1\34\1\35\2\17\1\36"+
    "\2\17\63\0\1\37\2\0\1\37\55\0\1\2\65\0"+
    "\1\40\7\0\1\41\3\0\7\41\1\0\26\41\12\0"+
    "\1\42\3\0\1\43\57\0\1\44\1\0\1\14\3\0"+
    "\36\45\17\0\1\17\3\0\36\17\17\0\1\17\3\0"+
    "\14\17\1\46\21\17\17\0\1\17\3\0\27\17\1\47"+
    "\6\17\17\0\1\17\3\0\25\17\1\50\10\17\17\0"+
    "\1\17\3\0\10\17\1\51\11\17\1\52\13\17\17\0"+
    "\1\17\3\0\14\17\1\53\21\17\17\0\1\17\3\0"+
    "\24\17\1\54\3\17\1\55\3\17\1\56\1\17\17\0"+
    "\1\17\3\0\10\17\1\57\25\17\17\0\1\17\3\0"+
    "\10\17\1\60\25\17\17\0\1\17\3\0\24\17\1\61"+
    "\11\17\17\0\1\17\3\0\14\17\1\62\21\17\17\0"+
    "\1\17\3\0\14\17\1\63\3\17\1\64\15\17\17\0"+
    "\1\17\3\0\27\17\1\65\2\17\1\66\3\17\17\0"+
    "\1\17\3\0\14\17\1\67\21\17\17\0\1\17\3\0"+
    "\20\17\1\70\15\17\17\0\1\17\3\0\14\17\1\71"+
    "\21\17\2\0\1\72\2\0\1\72\54\0\2\42\1\0"+
    "\2\42\4\0\1\73\1\42\2\0\1\74\1\42\3\0"+
    "\36\42\2\0\1\43\2\0\2\43\3\0\2\43\2\0"+
    "\2\43\3\0\7\43\1\0\26\43\17\0\1\75\60\0"+
    "\1\45\3\0\36\45\17\0\1\17\3\0\31\17\1\76"+
    "\4\17\17\0\1\17\3\0\25\17\1\77\10\17\17\0"+
    "\1\17\3\0\22\17\1\100\13\17\17\0\1\17\3\0"+
    "\13\17\1\101\22\17\17\0\1\17\3\0\10\17\1\102"+
    "\25\17\17\0\1\17\3\0\12\17\1\103\15\17\1\104"+
    "\2\17\1\105\2\17\17\0\1\17\3\0\31\17\1\106"+
    "\4\17\17\0\1\17\3\0\12\17\1\107\23\17\17\0"+
    "\1\17\3\0\31\17\1\110\4\17\17\0\1\17\3\0"+
    "\22\17\1\111\13\17\17\0\1\17\3\0\12\17\1\62"+
    "\23\17\17\0\1\17\3\0\12\17\1\103\23\17\17\0"+
    "\1\17\3\0\14\17\1\112\21\17\17\0\1\17\3\0"+
    "\31\17\1\113\4\17\17\0\1\17\3\0\14\17\1\114"+
    "\21\17\17\0\1\17\3\0\20\17\1\115\4\17\1\116"+
    "\10\17\17\0\1\17\3\0\11\17\1\117\24\17\17\0"+
    "\1\17\3\0\10\17\1\120\25\17\17\0\1\17\3\0"+
    "\24\17\1\121\11\17\17\0\1\17\3\0\27\17\1\122"+
    "\6\17\2\0\1\123\2\0\1\123\54\0\2\42\1\0"+
    "\2\42\4\0\1\73\1\42\2\0\1\124\1\42\3\0"+
    "\36\42\12\0\1\42\63\0\1\44\1\0\1\75\60\0"+
    "\1\17\3\0\25\17\1\125\10\17\17\0\1\17\3\0"+
    "\26\17\1\126\7\17\17\0\1\17\3\0\14\17\1\127"+
    "\21\17\17\0\1\17\3\0\14\17\1\130\21\17\17\0"+
    "\1\17\3\0\30\17\1\131\5\17\17\0\1\17\3\0"+
    "\27\17\1\132\6\17\17\0\1\17\3\0\13\17\1\133"+
    "\22\17\17\0\1\17\3\0\25\17\1\134\10\17\17\0"+
    "\1\17\3\0\14\17\1\135\10\17\1\136\10\17\17\0"+
    "\1\17\3\0\27\17\1\137\6\17\17\0\1\17\3\0"+
    "\20\17\1\140\15\17\17\0\1\17\3\0\30\17\1\121"+
    "\5\17\17\0\1\17\3\0\27\17\1\141\6\17\17\0"+
    "\1\17\3\0\25\17\1\142\10\17\17\0\1\17\3\0"+
    "\24\17\1\143\11\17\17\0\1\17\3\0\33\17\1\144"+
    "\2\17\17\0\1\17\3\0\26\17\1\145\2\17\1\146"+
    "\4\17\17\0\1\17\3\0\22\17\1\147\13\17\17\0"+
    "\1\17\3\0\22\17\1\150\13\17\17\0\1\17\3\0"+
    "\25\17\1\141\10\17\17\0\1\17\3\0\13\17\1\151"+
    "\22\17\17\0\1\17\3\0\13\17\1\152\22\17\17\0"+
    "\1\17\3\0\14\17\1\153\21\17\17\0\1\17\3\0"+
    "\10\17\1\154\25\17\17\0\1\17\3\0\24\17\1\155"+
    "\11\17\17\0\1\17\3\0\14\17\1\156\21\17\17\0"+
    "\1\17\3\0\14\17\1\157\21\17\17\0\1\17\3\0"+
    "\14\17\1\141\21\17\17\0\1\17\3\0\22\17\1\160"+
    "\13\17\17\0\1\17\3\0\27\17\1\161\6\17\17\0"+
    "\1\17\3\0\24\17\1\162\11\17\17\0\1\17\3\0"+
    "\20\17\1\163\15\17\17\0\1\17\3\0\14\17\1\164"+
    "\21\17\17\0\1\17\3\0\13\17\1\165\22\17\17\0"+
    "\1\17\3\0\31\17\1\166\4\17\17\0\1\17\3\0"+
    "\10\17\1\167\25\17\17\0\1\17\3\0\20\17\1\170"+
    "\15\17\17\0\1\17\3\0\14\17\1\171\21\17\17\0"+
    "\1\17\3\0\20\17\1\172\15\17\2\0\1\173\2\0"+
    "\1\173\11\0\1\17\3\0\36\17\17\0\1\17\3\0"+
    "\10\17\1\174\25\17\17\0\1\17\3\0\25\17\1\175"+
    "\10\17\17\0\1\17\3\0\20\17\1\176\15\17\17\0"+
    "\1\17\3\0\24\17\1\177\11\17\17\0\1\17\3\0"+
    "\10\17\1\200\25\17\2\0\1\201\2\0\1\201\11\0"+
    "\1\17\3\0\36\17\17\0\1\17\3\0\23\17\1\202"+
    "\12\17\17\0\1\17\3\0\33\17\1\62\2\17\17\0"+
    "\1\17\3\0\25\17\1\203\10\17\17\0\1\17\3\0"+
    "\12\17\1\204\23\17\17\0\1\17\3\0\11\17\1\205"+
    "\24\17\17\0\1\17\3\0\24\17\1\206\11\17\17\0"+
    "\1\17\3\0\25\17\1\207\10\17\17\0\1\17\3\0"+
    "\27\17\1\210\6\17\17\0\1\17\3\0\13\17\1\211"+
    "\22\17\17\0\1\17\3\0\14\17\1\212\21\17\17\0"+
    "\1\17\3\0\16\17\1\213\17\17\17\0\1\17\3\0"+
    "\12\17\1\211\23\17\33\0\2\214\1\215\7\214\1\216"+
    "\4\214\1\217\1\220\1\221\4\214\17\0\1\17\3\0"+
    "\13\17\1\222\22\17\17\0\1\17\3\0\30\17\1\223"+
    "\5\17\17\0\1\17\3\0\13\17\1\224\22\17\17\0"+
    "\1\17\3\0\25\17\1\225\10\17\2\0\1\226\2\0"+
    "\1\226\11\0\1\17\3\0\36\17\23\0\7\227\1\0"+
    "\26\45\17\0\1\17\3\0\14\17\1\230\21\17\2\0"+
    "\1\231\2\0\1\231\11\0\1\17\3\0\36\17\17\0"+
    "\1\17\3\0\14\17\1\232\21\17\17\0\1\17\3\0"+
    "\20\17\1\112\15\17\17\0\1\17\3\0\13\17\1\233"+
    "\22\17\17\0\1\17\3\0\30\17\1\234\5\17\17\0"+
    "\1\17\3\0\10\17\1\232\25\17\17\0\1\17\3\0"+
    "\10\17\1\235\25\17\17\0\1\17\3\0\13\17\1\236"+
    "\22\17\17\0\1\17\3\0\20\17\1\167\15\17\2\0"+
    "\1\237\2\0\1\237\2\0\1\240\3\0\1\241\2\0"+
    "\1\214\3\0\36\214\2\0\1\237\2\0\1\237\2\0"+
    "\1\240\3\0\1\241\2\0\1\214\3\0\10\214\1\242"+
    "\14\214\1\243\10\214\2\0\1\237\2\0\1\237\2\0"+
    "\1\240\3\0\1\241\2\0\1\214\3\0\25\214\1\244"+
    "\10\214\2\0\1\237\2\0\1\237\2\0\1\240\3\0"+
    "\1\241\2\0\1\214\3\0\10\214\1\245\25\214\2\0"+
    "\1\237\2\0\1\237\2\0\1\240\3\0\1\241\2\0"+
    "\1\214\3\0\14\214\1\246\21\214\2\0\1\237\2\0"+
    "\1\237\2\0\1\240\3\0\1\241\2\0\1\214\3\0"+
    "\10\214\1\247\25\214\17\0\1\17\3\0\14\17\1\250"+
    "\21\17\17\0\1\17\3\0\10\17\1\251\25\17\2\0"+
    "\1\252\2\0\1\252\11\0\1\17\3\0\36\17\33\0"+
    "\26\253\17\0\1\227\3\0\36\227\17\0\1\17\3\0"+
    "\24\17\1\254\11\17\33\0\2\255\1\256\23\255\17\0"+
    "\1\17\3\0\30\17\1\141\5\17\17\0\1\17\3\0"+
    "\14\17\1\257\21\17\2\0\1\260\2\0\1\261\11\0"+
    "\1\262\3\0\7\262\1\17\26\262\17\0\1\17\3\0"+
    "\30\17\1\263\5\17\17\0\1\17\3\0\10\17\1\264"+
    "\25\17\10\0\1\240\64\0\1\265\16\0\26\45\33\0"+
    "\26\266\2\0\1\237\2\0\1\237\2\0\1\240\3\0"+
    "\1\241\2\0\1\214\3\0\13\214\1\267\22\214\2\0"+
    "\1\237\2\0\1\237\2\0\1\240\3\0\1\241\2\0"+
    "\1\214\3\0\30\214\1\220\5\214\2\0\1\237\2\0"+
    "\1\237\2\0\1\240\3\0\1\241\2\0\1\214\3\0"+
    "\16\214\1\270\17\214\2\0\1\237\2\0\1\237\2\0"+
    "\1\240\3\0\1\241\2\0\1\214\3\0\20\214\1\271"+
    "\15\214\2\0\1\237\2\0\1\237\2\0\1\240\3\0"+
    "\1\241\2\0\1\214\3\0\24\214\1\272\11\214\2\0"+
    "\1\237\2\0\1\237\2\0\1\240\3\0\1\241\2\0"+
    "\1\214\3\0\24\214\1\273\11\214\17\0\1\17\3\0"+
    "\27\17\1\121\6\17\17\0\1\17\3\0\13\17\1\274"+
    "\22\17\33\0\2\275\1\276\23\275\2\0\1\237\2\0"+
    "\1\237\2\0\1\240\3\0\1\277\2\0\1\253\3\0"+
    "\36\253\17\0\1\17\3\0\31\17\1\300\4\17\2\0"+
    "\1\237\2\0\1\237\2\0\1\240\3\0\1\301\2\0"+
    "\1\255\3\0\36\255\2\0\1\237\2\0\1\237\2\0"+
    "\1\240\3\0\1\301\2\0\1\255\3\0\10\255\1\302"+
    "\25\255\2\0\1\303\2\0\1\303\11\0\1\17\3\0"+
    "\36\17\23\0\7\45\52\0\7\45\17\0\1\304\26\0"+
    "\1\262\3\0\7\262\1\17\26\262\17\0\1\17\1\305"+
    "\2\0\36\17\17\0\1\17\3\0\13\17\1\306\22\17"+
    "\14\0\1\241\2\0\1\266\3\0\36\266\2\0\1\237"+
    "\2\0\1\237\2\0\1\240\3\0\1\241\2\0\1\214"+
    "\3\0\14\214\1\307\21\214\2\0\1\237\2\0\1\237"+
    "\2\0\1\240\3\0\1\241\2\0\1\214\3\0\10\214"+
    "\1\310\25\214\2\0\1\237\2\0\1\237\2\0\1\240"+
    "\3\0\1\241\2\0\1\214\3\0\35\214\1\311\2\0"+
    "\1\237\2\0\1\237\2\0\1\240\3\0\1\241\2\0"+
    "\1\214\3\0\25\214\1\311\10\214\2\0\1\237\2\0"+
    "\1\237\2\0\1\240\3\0\1\241\2\0\1\214\3\0"+
    "\16\214\1\312\17\214\17\0\1\17\3\0\14\17\1\175"+
    "\21\17\2\0\1\237\2\0\1\237\2\0\1\240\3\0"+
    "\1\313\2\0\1\275\3\0\36\275\2\0\1\237\2\0"+
    "\1\237\2\0\1\240\3\0\1\313\2\0\1\275\3\0"+
    "\10\275\1\314\25\275\33\0\26\315\17\0\1\17\3\0"+
    "\10\17\1\112\25\17\33\0\26\316\2\0\1\237\2\0"+
    "\1\237\2\0\1\240\3\0\1\301\2\0\1\255\3\0"+
    "\13\255\1\317\22\255\23\0\7\320\1\0\26\45\52\0"+
    "\1\321\2\0\1\322\4\0\2\265\1\0\1\323\1\265"+
    "\72\0\1\17\3\0\14\17\1\324\21\17\2\0\1\237"+
    "\2\0\1\237\2\0\1\240\3\0\1\241\2\0\1\214"+
    "\3\0\24\214\1\325\11\214\2\0\1\237\2\0\1\237"+
    "\2\0\1\240\3\0\1\241\2\0\1\214\3\0\27\214"+
    "\1\326\6\214\2\0\1\237\2\0\1\237\2\0\1\327"+
    "\3\0\1\241\2\0\1\214\3\0\36\214\2\0\1\237"+
    "\2\0\1\237\2\0\1\240\3\0\1\241\2\0\1\214"+
    "\3\0\14\214\1\330\21\214\33\0\26\331\2\0\1\237"+
    "\2\0\1\237\2\0\1\240\3\0\1\313\2\0\1\275"+
    "\3\0\13\275\1\332\22\275\14\0\1\277\2\0\1\315"+
    "\3\0\36\315\14\0\1\301\2\0\1\316\3\0\36\316"+
    "\2\0\1\237\2\0\1\237\2\0\1\240\3\0\1\301"+
    "\2\0\1\255\3\0\14\255\1\333\21\255\17\0\1\320"+
    "\3\0\36\320\43\0\1\334\4\0\1\335\44\0\1\336"+
    "\26\0\1\265\75\0\1\17\3\0\30\17\1\337\5\17"+
    "\2\0\1\237\2\0\1\237\2\0\1\240\3\0\1\241"+
    "\2\0\1\214\3\0\10\214\1\340\25\214\2\0\1\237"+
    "\2\0\1\237\2\0\1\240\3\0\1\241\2\0\1\214"+
    "\3\0\20\214\1\341\15\214\14\0\1\265\16\0\17\45"+
    "\1\342\6\45\2\0\1\237\2\0\1\237\2\0\1\240"+
    "\3\0\1\241\2\0\1\214\3\0\24\214\1\343\11\214"+
    "\14\0\1\313\2\0\1\331\3\0\36\331\2\0\1\237"+
    "\2\0\1\237\2\0\1\240\3\0\1\313\2\0\1\275"+
    "\3\0\14\275\1\344\21\275\2\0\1\237\2\0\1\237"+
    "\2\0\1\240\3\0\1\301\2\0\1\255\3\0\24\255"+
    "\1\345\11\255\56\0\1\346\56\0\1\347\51\0\1\350"+
    "\15\0\1\260\2\0\1\351\11\0\1\262\3\0\7\262"+
    "\1\17\26\262\2\0\1\237\2\0\1\237\2\0\1\240"+
    "\3\0\1\241\2\0\1\214\3\0\1\352\35\214\2\0"+
    "\1\237\2\0\1\237\2\0\1\240\3\0\1\241\2\0"+
    "\1\214\3\0\31\214\1\353\4\214\17\0\1\45\3\0"+
    "\14\45\1\354\21\45\2\0\1\237\2\0\1\237\2\0"+
    "\1\240\3\0\1\241\2\0\1\214\3\0\31\214\1\355"+
    "\4\214\2\0\1\237\2\0\1\237\2\0\1\240\3\0"+
    "\1\313\2\0\1\275\3\0\24\275\1\356\11\275\2\0"+
    "\1\237\2\0\1\237\2\0\1\240\3\0\1\301\2\0"+
    "\1\255\3\0\10\255\1\357\25\255\33\0\1\360\64\0"+
    "\1\361\64\0\1\362\40\0\7\45\17\0\1\363\11\0"+
    "\1\237\2\0\1\237\2\0\1\240\3\0\1\241\2\0"+
    "\1\214\3\0\6\214\1\364\27\214\2\0\1\237\2\0"+
    "\1\237\2\0\1\240\3\0\1\241\2\0\1\214\3\0"+
    "\23\214\1\272\12\214\17\0\1\45\3\0\10\45\1\365"+
    "\25\45\2\0\1\237\2\0\1\237\2\0\1\240\3\0"+
    "\1\241\2\0\1\214\3\0\14\214\1\311\21\214\2\0"+
    "\1\237\2\0\1\237\2\0\1\240\3\0\1\313\2\0"+
    "\1\275\3\0\10\275\1\366\25\275\2\0\1\237\2\0"+
    "\1\237\2\0\1\240\3\0\1\301\2\0\1\255\3\0"+
    "\1\367\35\255\36\0\1\370\63\0\1\371\54\0\1\370"+
    "\75\0\1\372\2\0\1\373\5\0\1\237\2\0\1\237"+
    "\2\0\1\240\3\0\1\241\2\0\1\214\3\0\14\214"+
    "\1\374\21\214\17\0\1\45\3\0\22\45\1\375\13\45"+
    "\2\0\1\237\2\0\1\237\2\0\1\240\3\0\1\313"+
    "\2\0\1\275\3\0\1\376\35\275\2\0\1\237\2\0"+
    "\1\237\2\0\1\240\3\0\1\301\2\0\1\255\3\0"+
    "\3\255\1\377\32\255\50\0\1\u0100\53\0\1\360\60\0"+
    "\1\u0101\4\0\1\u0102\44\0\1\u0103\26\0\1\237\2\0"+
    "\1\237\2\0\1\240\3\0\1\241\2\0\1\214\3\0"+
    "\10\214\1\u0104\25\214\2\0\1\u0105\2\0\1\u0105\11\0"+
    "\1\45\3\0\36\45\2\0\1\237\2\0\1\237\2\0"+
    "\1\240\3\0\1\313\2\0\1\275\3\0\1\275\1\u0106"+
    "\34\275\2\0\1\237\2\0\1\237\2\0\1\240\3\0"+
    "\1\301\2\0\1\255\3\0\24\255\1\u0107\11\255\53\0"+
    "\1\u0108\63\0\1\u0109\56\0\1\u010a\51\0\1\u010b\15\0"+
    "\1\237\2\0\1\237\2\0\1\240\3\0\1\241\2\0"+
    "\1\214\3\0\22\214\1\u010c\13\214\33\0\26\u010d\2\0"+
    "\1\237\2\0\1\237\2\0\1\240\3\0\1\313\2\0"+
    "\1\275\3\0\25\275\1\u010e\10\275\2\0\1\237\2\0"+
    "\1\237\2\0\1\240\3\0\1\301\2\0\1\255\3\0"+
    "\31\255\1\u010f\4\255\33\0\1\u0110\64\0\1\u0111\64\0"+
    "\1\u0112\17\0\1\237\2\0\1\237\2\0\1\u0113\3\0"+
    "\1\241\2\0\1\214\3\0\36\214\11\0\1\u0114\5\0"+
    "\1\u010d\3\0\36\u010d\2\0\1\237\2\0\1\237\2\0"+
    "\1\240\3\0\1\313\2\0\1\275\3\0\22\275\1\u0115"+
    "\13\275\2\0\1\237\2\0\1\237\2\0\1\240\3\0"+
    "\1\301\2\0\1\255\3\0\14\255\1\u0116\21\255\36\0"+
    "\1\u0117\63\0\1\u0118\54\0\1\u0117\37\0\1\265\16\0"+
    "\2\45\1\u0119\23\45\2\0\1\237\2\0\1\237\2\0"+
    "\1\240\3\0\1\313\2\0\1\275\3\0\14\275\1\u011a"+
    "\21\275\2\0\1\237\2\0\1\237\2\0\1\240\3\0"+
    "\1\301\2\0\1\255\3\0\27\255\1\u011b\6\255\33\0"+
    "\1\u0100\70\0\1\u0110\34\0\1\45\3\0\10\45\1\u011c"+
    "\25\45\2\0\1\237\2\0\1\237\2\0\1\240\3\0"+
    "\1\313\2\0\1\275\3\0\10\275\1\u011d\25\275\2\0"+
    "\1\237\2\0\1\237\2\0\1\240\3\0\1\301\2\0"+
    "\1\255\3\0\25\255\1\u011e\10\255\17\0\1\45\3\0"+
    "\13\45\1\u011f\22\45\2\0\1\237\2\0\1\237\2\0"+
    "\1\240\3\0\1\313\2\0\1\275\3\0\24\275\1\u0120"+
    "\11\275\2\0\1\237\2\0\1\237\2\0\1\u0121\3\0"+
    "\1\301\2\0\1\255\3\0\36\255\17\0\1\45\3\0"+
    "\14\45\1\u0122\21\45\2\0\1\237\2\0\1\237\2\0"+
    "\1\240\3\0\1\313\2\0\1\275\3\0\25\275\1\u0123"+
    "\10\275\14\0\1\265\16\0\2\45\1\u0124\23\45\17\0"+
    "\1\45\3\0\24\45\1\u0125\11\45\2\0\1\237\2\0"+
    "\1\237\2\0\1\u0126\3\0\1\313\2\0\1\275\3\0"+
    "\36\275\17\0\1\45\3\0\10\45\1\u0127\25\45\17\0"+
    "\1\45\3\0\10\45\1\u0128\25\45\14\0\1\265\16\0"+
    "\2\45\1\u0129\23\45\17\0\1\45\3\0\13\45\1\u012a"+
    "\22\45\2\0\1\u012b\2\0\1\u012b\11\0\1\45\3\0"+
    "\36\45\17\0\1\45\3\0\10\45\1\u012c\25\45\17\0"+
    "\1\45\3\0\14\45\1\u012d\21\45\33\0\26\u012e\17\0"+
    "\1\45\3\0\13\45\1\u012f\22\45\17\0\1\45\3\0"+
    "\24\45\1\u0130\11\45\11\0\1\u0131\5\0\1\u012e\3\0"+
    "\36\u012e\17\0\1\45\3\0\14\45\1\u0132\21\45\17\0"+
    "\1\45\3\0\10\45\1\u0133\25\45\17\0\1\45\3\0"+
    "\24\45\1\u0134\11\45\2\0\1\u0135\2\0\1\u0135\11\0"+
    "\1\45\3\0\36\45\17\0\1\45\3\0\10\45\1\u0136"+
    "\25\45\33\0\26\u0137\2\0\1\u0138\2\0\1\u0138\11\0"+
    "\1\45\3\0\36\45\11\0\1\u0139\5\0\1\u0137\3\0"+
    "\36\u0137\33\0\26\u013a\11\0\1\u013b\5\0\1\u013a\3\0"+
    "\36\u013a";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14504];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\1\1\3\11"+
    "\2\1\2\11\20\1\1\0\1\11\2\0\1\1\1\0"+
    "\25\1\3\0\26\1\1\11\47\1\1\0\5\1\1\0"+
    "\24\1\1\0\2\1\1\0\5\1\1\0\12\1\1\0"+
    "\5\1\2\0\3\1\1\11\15\1\3\0\13\1\2\0"+
    "\11\1\3\0\7\1\4\0\6\1\4\0\4\1\4\0"+
    "\4\1\4\0\1\1\1\0\2\1\1\11\3\0\1\1"+
    "\1\0\2\1\3\0\1\1\1\11\2\1\2\0\22\1"+
    "\1\0\2\1\1\0\2\1\1\11\3\1\1\0\1\1"+
    "\2\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Proyecto(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 28: break;
          case 2:
            { System.out.print(yytext());
            }
            // fall through
          case 29: break;
          case 3:
            { System.out.println("encontre un operando aritmetico " + yytext());
            }
            // fall through
          case 30: break;
          case 4:
            { System.out.println("encontre un parentesis abierto" + yytext());
            }
            // fall through
          case 31: break;
          case 5:
            { System.out.println("encontre un parentesis cerrado" + yytext());
            }
            // fall through
          case 32: break;
          case 6:
            { System.out.println("encontre un punto " + yytext());
            }
            // fall through
          case 33: break;
          case 7:
            { System.out.println("Se encontro un error " + yytext());
            }
            // fall through
          case 34: break;
          case 8:
            { System.out.println("encontre un punto y coma " + yytext());
            }
            // fall through
          case 35: break;
          case 9:
            { System.out.println("encontre un Operando =  " + yytext());
            }
            // fall through
          case 36: break;
          case 10:
            { System.out.println("encontre un identificador  " + yytext());
            }
            // fall through
          case 37: break;
          case 11:
            { System.out.println("encontre una cadena de texto " + yytext());
            }
            // fall through
          case 38: break;
          case 12:
            { System.out.println("encontre un comentario de una linea " + yytext());
            }
            // fall through
          case 39: break;
          case 13:
            { System.out.println("encontre una palabra reservada " + yytext());
            }
            // fall through
          case 40: break;
          case 14:
            { System.out.println("encontre un numero Real " + yytext());
            }
            // fall through
          case 41: break;
          case 15:
            { System.out.println("encontre una tabulacion");
            }
            // fall through
          case 42: break;
          case 16:
            { System.out.println("encontre un comentario de varias lineas " + yytext());
            }
            // fall through
          case 43: break;
          case 17:
            { System.out.println("encontre un Real " + yytext());
            }
            // fall through
          case 44: break;
          case 18:
            { System.out.println("encontre una clase " + yytext());
    System.out.println("encontre un identificador " + yytext());
            }
            // fall through
          case 45: break;
          case 19:
            { System.out.println("encontre una funcion " + yytext());  
    System.out.println("encontre un parentesis " + yytext());
    System.out.println("encontre una Identificador " + yytext());
            }
            // fall through
          case 46: break;
          case 20:
            { System.out.println("encontre una cadena " + yytext());
            }
            // fall through
          case 47: break;
          case 21:
            { System.out.println("encontre un entero ");
    String caden = yytext();
    caden = caden.substring(7,caden.length()-1);
    System.out.println(caden);
            }
            // fall through
          case 48: break;
          case 22:
            { System.out.println("encontre un boleano " + yytext());
            }
            // fall through
          case 49: break;
          case 23:
            { System.out.println("encontre un extiende " + yytext());
    System.out.println("encontre un identificador " + yytext());
            }
            // fall through
          case 50: break;
          case 24:
            { System.out.println("encontre una funcion Aritmetica REAL " + yytext());  
    System.out.println("encontre una palabra reservada" + yytext());
    System.out.println("encontre un parentesis " + yytext());
    System.out.println("encontre un IDENTIFICADOR " + yytext());
            }
            // fall through
          case 51: break;
          case 25:
            { System.out.println("encontre una funcion especial REAL " + yytext());  
    System.out.println("encontre un identificador" + yytext());
    System.out.println("encontre un parentesis " + yytext());
    System.out.println("encontre un IDENTIFICADOR " + yytext());
            }
            // fall through
          case 52: break;
          case 26:
            { System.out.println("encontre una funcion especial ENTERA " + yytext());  
    System.out.println("encontre una palabra reservada" + yytext());
    System.out.println("encontre un IDENTIFICADOR" + yytext());
    System.out.println("encontre un parentesis " + yytext());
            }
            // fall through
          case 53: break;
          case 27:
            { System.out.println("encontre una funcion especial BOLEANA " + yytext());  
    System.out.println("encontre una palabra reservada" + yytext());
    System.out.println("encontre un parentesis " + yytext());
    System.out.println("encontre un IDENTIFICADOR " + yytext());
            }
            // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Proyecto [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Proyecto scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Proyecto(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
