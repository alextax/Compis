// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: src/main/java/com/alex/compis/jflex/archivo.flex

package com.alex.compis;
import java.io.*;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Proyecto {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\1\6\3\0\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\14\1\16\1\17\12\20\1\21\1\22"+
    "\1\23\1\24\1\23\2\0\1\25\1\26\2\27\1\30"+
    "\7\27\1\31\2\27\1\32\1\27\1\33\10\27\3\0"+
    "\1\7\1\34\1\0\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\2\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\46\1\54\1\55\1\56\1\57\1\60"+
    "\1\46\1\61\1\46\1\62\12\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\2\1\1\1\4\2\5"+
    "\1\4\1\6\1\7\2\10\21\11\2\0\1\12\1\0"+
    "\1\13\1\0\25\11\1\14\1\11\3\0\31\11\1\15"+
    "\1\16\21\11\1\14\35\11\1\0\5\11\1\0\16\11"+
    "\1\1\6\17\1\11\1\1\2\11\1\0\1\20\2\11"+
    "\1\0\7\11\1\0\1\21\1\1\6\17\2\11\1\0"+
    "\1\22\2\11\2\23\1\11\4\0\1\1\2\11\6\17"+
    "\1\11\2\24\2\1\1\23\5\0\1\11\4\17\1\1"+
    "\1\24\1\22\2\23\1\25\2\0\1\1\1\11\2\17"+
    "\1\21\1\17\2\24\1\23\3\0\1\11\2\17\1\1"+
    "\1\17\1\24\1\23\4\0\2\17\1\1\1\17\1\24"+
    "\1\23\4\0\1\17\1\1\1\24\1\23\4\0\1\17"+
    "\1\1\1\24\1\23\4\0\1\17\1\0\1\24\1\23"+
    "\1\14\3\0\1\17\1\0\1\24\1\23\3\0\1\21"+
    "\1\26\1\24\1\23\2\0\1\1\1\24\1\23\1\1"+
    "\1\24\1\23\1\1\1\24\1\21\1\1\1\24\2\1"+
    "\1\21\4\1\1\0\2\1\1\0\2\1\1\27\3\1"+
    "\1\0\1\1\2\0\1\30\1\0\1\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[342];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\63\0\146\0\63\0\231\0\314\0\63"+
    "\0\377\0\63\0\u0132\0\u0165\0\63\0\63\0\314\0\u0198"+
    "\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd\0\u0330"+
    "\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8"+
    "\0\u04fb\0\377\0\63\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa"+
    "\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792"+
    "\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a"+
    "\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2"+
    "\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a"+
    "\0\u0fbd\0\63\0\u0ac2\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc"+
    "\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254"+
    "\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u0198\0\u1353\0\u1386\0\u13b9"+
    "\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9"+
    "\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881"+
    "\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19"+
    "\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1"+
    "\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49"+
    "\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u0198"+
    "\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046"+
    "\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de"+
    "\0\u2211\0\u2244\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376"+
    "\0\u23a9\0\u23dc\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e"+
    "\0\u2541\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6"+
    "\0\u26d9\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e"+
    "\0\u2871\0\u28a4\0\u28d7\0\u290a\0\u1d49\0\u293d\0\u2970\0\u29a3"+
    "\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b"+
    "\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3"+
    "\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05\0\u2e38\0\u2e6b"+
    "\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003"+
    "\0\u3036\0\u3069\0\u309c\0\u30cf\0\u3102\0\u3135\0\u3168\0\u319b"+
    "\0\u31ce\0\u3201\0\u3234\0\u3267\0\u329a\0\u32cd\0\u3300\0\u3333"+
    "\0\u3366\0\u3399\0\u33cc\0\u33ff\0\u3432\0\u3465\0\u3498\0\u34cb"+
    "\0\u34fe\0\u3531\0\u3564\0\u3597\0\u35ca\0\u35fd\0\u3630\0\u3663"+
    "\0\u3696\0\u36c9\0\63\0\u36fc\0\u372f\0\u3762\0\u3795\0\u37c8"+
    "\0\u37fb\0\u382e\0\u3861\0\u3894\0\u38c7\0\u38fa\0\63\0\u392d"+
    "\0\u3960\0\u3993\0\u39c6\0\u39f9\0\u3a2c\0\u3a5f\0\u3a92\0\u3ac5"+
    "\0\u3af8\0\u3b2b\0\u3b5e\0\u3b91\0\u3bc4\0\u3bf7\0\u3c2a\0\u3c5d"+
    "\0\u3c90\0\u3cc3\0\u3cf6\0\u3d29\0\u3d5c\0\u3d8f\0\u3dc2\0\u3df5"+
    "\0\u3e28\0\u3e5b\0\u3e8e\0\63\0\u3ec1\0\u3ef4\0\u3f27\0\u3f5a"+
    "\0\u3f8d\0\u3fc0\0\u3ff3\0\63\0\u4026\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[342];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\4\1\7\1\10"+
    "\1\11\2\12\2\10\2\12\1\13\1\14\1\15\1\12"+
    "\1\16\1\17\4\20\1\21\1\22\1\20\1\2\1\20"+
    "\1\23\1\24\1\25\1\26\1\27\1\20\1\30\1\31"+
    "\1\20\1\32\1\33\1\34\1\20\1\35\1\36\1\37"+
    "\2\20\1\40\2\20\65\0\1\41\2\0\1\41\57\0"+
    "\1\3\104\0\1\16\40\0\1\42\2\0\1\42\2\0"+
    "\1\43\7\0\1\42\4\0\7\42\1\0\26\42\13\0"+
    "\1\44\3\0\1\45\61\0\1\46\1\0\1\14\62\0"+
    "\1\20\4\0\36\20\20\0\1\20\4\0\14\20\1\47"+
    "\21\20\20\0\1\20\4\0\27\20\1\50\6\20\20\0"+
    "\1\20\4\0\25\20\1\51\10\20\20\0\1\20\4\0"+
    "\10\20\1\52\11\20\1\53\2\20\1\54\10\20\20\0"+
    "\1\20\4\0\14\20\1\55\21\20\20\0\1\20\4\0"+
    "\22\20\1\56\1\20\1\57\3\20\1\60\3\20\1\61"+
    "\1\20\20\0\1\20\4\0\10\20\1\62\25\20\20\0"+
    "\1\20\4\0\10\20\1\63\25\20\20\0\1\20\4\0"+
    "\24\20\1\64\11\20\20\0\1\20\4\0\14\20\1\65"+
    "\21\20\20\0\1\20\4\0\14\20\1\66\3\20\1\67"+
    "\15\20\20\0\1\20\4\0\32\20\1\70\3\20\20\0"+
    "\1\20\4\0\27\20\1\71\2\20\1\72\3\20\20\0"+
    "\1\20\4\0\14\20\1\73\21\20\20\0\1\20\4\0"+
    "\20\20\1\74\15\20\20\0\1\20\4\0\14\20\1\75"+
    "\21\20\2\0\1\76\2\0\1\76\56\0\2\44\1\0"+
    "\2\44\5\0\1\77\1\44\2\0\1\100\1\44\4\0"+
    "\36\44\2\0\1\45\2\0\1\45\1\0\1\45\3\0"+
    "\2\45\2\0\2\45\4\0\7\45\1\0\26\45\20\0"+
    "\1\14\62\0\1\20\4\0\31\20\1\101\4\20\20\0"+
    "\1\20\4\0\25\20\1\102\10\20\20\0\1\20\4\0"+
    "\22\20\1\103\13\20\20\0\1\20\4\0\13\20\1\104"+
    "\22\20\20\0\1\20\4\0\10\20\1\105\25\20\20\0"+
    "\1\20\4\0\24\20\1\106\11\20\20\0\1\20\4\0"+
    "\12\20\1\107\15\20\1\110\2\20\1\111\2\20\20\0"+
    "\1\20\4\0\20\20\1\112\15\20\20\0\1\20\4\0"+
    "\31\20\1\113\4\20\20\0\1\20\4\0\12\20\1\114"+
    "\23\20\20\0\1\20\4\0\31\20\1\115\4\20\20\0"+
    "\1\20\4\0\22\20\1\116\13\20\20\0\1\20\4\0"+
    "\12\20\1\65\23\20\20\0\1\20\4\0\12\20\1\117"+
    "\15\20\1\120\5\20\20\0\1\20\4\0\14\20\1\121"+
    "\21\20\20\0\1\20\4\0\31\20\1\122\4\20\20\0"+
    "\1\20\4\0\14\20\1\123\21\20\20\0\1\20\4\0"+
    "\22\20\1\124\13\20\20\0\1\20\4\0\20\20\1\125"+
    "\4\20\1\126\10\20\20\0\1\20\4\0\11\20\1\127"+
    "\24\20\20\0\1\20\4\0\10\20\1\130\25\20\20\0"+
    "\1\20\4\0\24\20\1\124\11\20\20\0\1\20\4\0"+
    "\27\20\1\131\6\20\2\0\1\132\2\0\1\132\56\0"+
    "\2\44\1\0\2\44\5\0\1\77\1\44\2\0\1\133"+
    "\1\44\4\0\36\44\13\0\1\44\67\0\1\20\4\0"+
    "\25\20\1\134\10\20\20\0\1\20\4\0\26\20\1\135"+
    "\7\20\20\0\1\20\4\0\14\20\1\136\21\20\20\0"+
    "\1\20\4\0\14\20\1\137\21\20\20\0\1\20\4\0"+
    "\30\20\1\140\5\20\20\0\1\20\4\0\30\20\1\141"+
    "\5\20\20\0\1\20\4\0\27\20\1\142\6\20\20\0"+
    "\1\20\4\0\13\20\1\143\15\20\1\144\4\20\20\0"+
    "\1\20\4\0\25\20\1\145\10\20\20\0\1\20\4\0"+
    "\23\20\1\146\12\20\20\0\1\20\4\0\14\20\1\147"+
    "\10\20\1\150\10\20\20\0\1\20\4\0\27\20\1\151"+
    "\6\20\20\0\1\20\4\0\20\20\1\152\15\20\20\0"+
    "\1\20\4\0\30\20\1\124\5\20\20\0\1\20\4\0"+
    "\22\20\1\153\4\20\1\142\6\20\20\0\1\20\4\0"+
    "\31\20\1\154\4\20\20\0\1\20\4\0\27\20\1\155"+
    "\6\20\20\0\1\20\4\0\25\20\1\156\10\20\20\0"+
    "\1\20\4\0\24\20\1\157\11\20\20\0\1\20\4\0"+
    "\25\20\1\155\10\20\20\0\1\20\4\0\33\20\1\160"+
    "\2\20\20\0\1\20\4\0\26\20\1\161\2\20\1\162"+
    "\4\20\20\0\1\20\4\0\22\20\1\163\13\20\20\0"+
    "\1\20\4\0\22\20\1\164\13\20\20\0\1\20\4\0"+
    "\13\20\1\165\22\20\20\0\1\20\4\0\13\20\1\166"+
    "\22\20\20\0\1\20\4\0\14\20\1\167\21\20\20\0"+
    "\1\20\4\0\10\20\1\170\25\20\20\0\1\20\4\0"+
    "\24\20\1\171\11\20\20\0\1\20\4\0\14\20\1\172"+
    "\21\20\20\0\1\20\4\0\31\20\1\144\4\20\20\0"+
    "\1\20\4\0\14\20\1\173\21\20\20\0\1\20\4\0"+
    "\14\20\1\155\21\20\20\0\1\20\4\0\27\20\1\174"+
    "\6\20\20\0\1\20\4\0\22\20\1\175\13\20\20\0"+
    "\1\20\4\0\20\20\1\176\15\20\20\0\1\20\4\0"+
    "\27\20\1\177\6\20\20\0\1\20\4\0\24\20\1\200"+
    "\11\20\20\0\1\20\4\0\20\20\1\201\15\20\20\0"+
    "\1\20\4\0\14\20\1\202\21\20\20\0\1\20\4\0"+
    "\32\20\1\203\3\20\20\0\1\20\4\0\10\20\1\204"+
    "\25\20\20\0\1\20\4\0\13\20\1\205\22\20\20\0"+
    "\1\20\4\0\31\20\1\206\4\20\20\0\1\20\4\0"+
    "\10\20\1\207\25\20\20\0\1\20\4\0\20\20\1\210"+
    "\15\20\20\0\1\20\4\0\14\20\1\211\21\20\20\0"+
    "\1\20\4\0\20\20\1\212\15\20\2\0\1\213\2\0"+
    "\1\213\12\0\1\20\4\0\36\20\20\0\1\20\4\0"+
    "\10\20\1\214\25\20\20\0\1\20\4\0\25\20\1\215"+
    "\10\20\20\0\1\20\4\0\20\20\1\216\15\20\20\0"+
    "\1\20\4\0\24\20\1\217\11\20\20\0\1\20\4\0"+
    "\10\20\1\220\25\20\2\0\1\221\2\0\1\221\12\0"+
    "\1\20\4\0\36\20\20\0\1\20\4\0\23\20\1\222"+
    "\12\20\20\0\1\20\4\0\32\20\1\223\3\20\20\0"+
    "\1\20\4\0\33\20\1\65\2\20\20\0\1\20\4\0"+
    "\24\20\1\224\11\20\20\0\1\20\4\0\25\20\1\225"+
    "\10\20\20\0\1\20\4\0\12\20\1\226\23\20\20\0"+
    "\1\20\4\0\11\20\1\227\24\20\20\0\1\20\4\0"+
    "\24\20\1\230\11\20\20\0\1\20\4\0\20\20\1\231"+
    "\15\20\20\0\1\20\4\0\24\20\1\232\11\20\20\0"+
    "\1\20\4\0\25\20\1\233\10\20\20\0\1\20\4\0"+
    "\27\20\1\234\6\20\20\0\1\20\4\0\13\20\1\235"+
    "\22\20\20\0\1\20\4\0\14\20\1\236\21\20\20\0"+
    "\1\20\4\0\16\20\1\237\17\20\20\0\1\20\4\0"+
    "\12\20\1\235\23\20\20\0\1\240\4\0\7\240\1\0"+
    "\2\241\1\242\7\241\1\243\4\241\1\244\1\245\1\246"+
    "\4\241\20\0\1\20\4\0\13\20\1\247\22\20\20\0"+
    "\1\20\4\0\30\20\1\250\5\20\20\0\1\20\4\0"+
    "\13\20\1\251\22\20\20\0\1\20\4\0\25\20\1\252"+
    "\10\20\2\0\1\253\2\0\1\253\12\0\1\20\4\0"+
    "\36\20\20\0\1\240\4\0\7\254\1\0\26\240\20\0"+
    "\1\20\4\0\14\20\1\255\21\20\20\0\1\20\4\0"+
    "\12\20\1\256\23\20\20\0\1\20\4\0\10\20\1\121"+
    "\25\20\2\0\1\257\2\0\1\257\12\0\1\20\4\0"+
    "\36\20\20\0\1\20\4\0\14\20\1\260\21\20\20\0"+
    "\1\20\4\0\20\20\1\121\15\20\20\0\1\20\4\0"+
    "\13\20\1\261\22\20\20\0\1\20\4\0\27\20\1\262"+
    "\6\20\20\0\1\20\4\0\12\20\1\263\23\20\20\0"+
    "\1\20\4\0\30\20\1\264\5\20\20\0\1\20\4\0"+
    "\10\20\1\260\25\20\20\0\1\20\4\0\10\20\1\265"+
    "\25\20\20\0\1\20\4\0\13\20\1\266\22\20\20\0"+
    "\1\20\4\0\20\20\1\207\15\20\20\0\1\240\4\0"+
    "\36\240\2\0\1\267\2\0\1\267\3\0\1\270\3\0"+
    "\1\271\2\0\1\241\4\0\36\241\2\0\1\267\2\0"+
    "\1\267\3\0\1\270\3\0\1\271\2\0\1\241\4\0"+
    "\10\241\1\272\14\241\1\273\10\241\2\0\1\267\2\0"+
    "\1\267\3\0\1\270\3\0\1\271\2\0\1\241\4\0"+
    "\25\241\1\274\10\241\2\0\1\267\2\0\1\267\3\0"+
    "\1\270\3\0\1\271\2\0\1\241\4\0\10\241\1\275"+
    "\25\241\2\0\1\267\2\0\1\267\3\0\1\270\3\0"+
    "\1\271\2\0\1\241\4\0\14\241\1\276\21\241\2\0"+
    "\1\267\2\0\1\267\3\0\1\270\3\0\1\271\2\0"+
    "\1\241\4\0\10\241\1\277\25\241\20\0\1\20\4\0"+
    "\14\20\1\300\21\20\20\0\1\20\4\0\10\20\1\301"+
    "\25\20\2\0\1\302\2\0\1\302\12\0\1\20\4\0"+
    "\36\20\20\0\1\240\4\0\7\240\1\0\26\303\20\0"+
    "\1\254\4\0\36\254\20\0\1\20\4\0\24\20\1\304"+
    "\11\20\20\0\1\20\4\0\31\20\1\305\4\20\20\0"+
    "\1\240\4\0\7\240\1\0\2\306\1\307\23\306\20\0"+
    "\1\20\4\0\30\20\1\155\5\20\20\0\1\20\4\0"+
    "\14\20\1\310\21\20\2\0\1\311\2\0\1\311\2\0"+
    "\1\312\7\0\1\20\4\0\36\20\20\0\1\20\4\0"+
    "\20\20\1\224\15\20\2\0\1\313\2\0\1\314\12\0"+
    "\1\315\4\0\7\315\1\20\26\315\20\0\1\20\4\0"+
    "\30\20\1\316\5\20\20\0\1\20\4\0\10\20\1\317"+
    "\25\20\11\0\1\270\66\0\1\2\17\0\26\240\35\0"+
    "\26\320\2\0\1\267\2\0\1\267\3\0\1\270\3\0"+
    "\1\271\2\0\1\241\4\0\13\241\1\321\22\241\2\0"+
    "\1\267\2\0\1\267\3\0\1\270\3\0\1\271\2\0"+
    "\1\241\4\0\30\241\1\245\5\241\2\0\1\267\2\0"+
    "\1\267\3\0\1\270\3\0\1\271\2\0\1\241\4\0"+
    "\16\241\1\322\17\241\2\0\1\267\2\0\1\267\3\0"+
    "\1\270\3\0\1\271\2\0\1\241\4\0\20\241\1\323"+
    "\15\241\2\0\1\267\2\0\1\267\3\0\1\270\3\0"+
    "\1\271\2\0\1\241\4\0\24\241\1\324\11\241\2\0"+
    "\1\267\2\0\1\267\3\0\1\270\3\0\1\271\2\0"+
    "\1\241\4\0\24\241\1\325\11\241\20\0\1\20\4\0"+
    "\27\20\1\124\6\20\20\0\1\20\4\0\13\20\1\326"+
    "\22\20\20\0\1\240\4\0\7\240\1\0\2\327\1\330"+
    "\23\327\2\0\1\267\2\0\1\267\3\0\1\270\3\0"+
    "\1\331\2\0\1\303\4\0\36\303\20\0\1\20\4\0"+
    "\31\20\1\224\4\20\20\0\1\20\4\0\25\20\1\121"+
    "\10\20\2\0\1\267\2\0\1\267\3\0\1\270\3\0"+
    "\1\332\2\0\1\306\4\0\36\306\2\0\1\267\2\0"+
    "\1\267\3\0\1\270\3\0\1\332\2\0\1\306\4\0"+
    "\10\306\1\333\25\306\2\0\1\334\2\0\1\334\12\0"+
    "\1\20\4\0\36\20\10\0\1\335\7\0\1\336\4\0"+
    "\36\336\20\0\1\336\4\0\36\336\25\0\7\240\54\0"+
    "\7\240\17\0\1\337\27\0\1\315\4\0\7\315\1\20"+
    "\26\315\20\0\1\20\1\340\3\0\36\20\20\0\1\20"+
    "\4\0\13\20\1\341\22\20\15\0\1\271\2\0\1\320"+
    "\4\0\36\320\2\0\1\267\2\0\1\267\3\0\1\270"+
    "\3\0\1\271\2\0\1\241\4\0\14\241\1\342\21\241"+
    "\2\0\1\267\2\0\1\267\3\0\1\270\3\0\1\271"+
    "\2\0\1\241\4\0\10\241\1\343\25\241\2\0\1\267"+
    "\2\0\1\267\3\0\1\270\3\0\1\271\2\0\1\241"+
    "\4\0\35\241\1\344\2\0\1\267\2\0\1\267\3\0"+
    "\1\270\3\0\1\271\2\0\1\241\4\0\25\241\1\344"+
    "\10\241\2\0\1\267\2\0\1\267\3\0\1\270\3\0"+
    "\1\271\2\0\1\241\4\0\16\241\1\345\17\241\20\0"+
    "\1\20\4\0\14\20\1\215\21\20\2\0\1\267\2\0"+
    "\1\267\3\0\1\270\3\0\1\346\2\0\1\327\4\0"+
    "\36\327\2\0\1\267\2\0\1\267\3\0\1\270\3\0"+
    "\1\346\2\0\1\327\4\0\10\327\1\347\25\327\35\0"+
    "\26\350\35\0\26\351\2\0\1\267\2\0\1\267\3\0"+
    "\1\270\3\0\1\332\2\0\1\306\4\0\13\306\1\352"+
    "\22\306\20\0\1\240\4\0\7\353\1\0\26\240\10\0"+
    "\1\2\7\0\1\336\4\0\36\336\54\0\1\354\2\0"+
    "\1\355\4\0\2\2\1\0\1\356\1\2\75\0\1\20"+
    "\4\0\14\20\1\357\21\20\2\0\1\267\2\0\1\267"+
    "\3\0\1\270\3\0\1\271\2\0\1\241\4\0\24\241"+
    "\1\360\11\241\2\0\1\267\2\0\1\267\3\0\1\270"+
    "\3\0\1\271\2\0\1\241\4\0\27\241\1\361\6\241"+
    "\2\0\1\267\2\0\1\267\3\0\1\362\3\0\1\271"+
    "\2\0\1\241\4\0\36\241\2\0\1\267\2\0\1\267"+
    "\3\0\1\270\3\0\1\271\2\0\1\241\4\0\14\241"+
    "\1\363\21\241\35\0\26\364\2\0\1\267\2\0\1\267"+
    "\3\0\1\270\3\0\1\346\2\0\1\327\4\0\13\327"+
    "\1\365\22\327\15\0\1\331\2\0\1\350\4\0\36\350"+
    "\15\0\1\332\2\0\1\351\4\0\36\351\2\0\1\267"+
    "\2\0\1\267\3\0\1\270\3\0\1\332\2\0\1\306"+
    "\4\0\14\306\1\366\21\306\20\0\1\353\4\0\36\353"+
    "\45\0\1\367\4\0\1\370\46\0\1\371\26\0\1\2"+
    "\100\0\1\20\4\0\30\20\1\372\5\20\2\0\1\267"+
    "\2\0\1\267\3\0\1\270\3\0\1\271\2\0\1\241"+
    "\4\0\10\241\1\373\25\241\2\0\1\267\2\0\1\267"+
    "\3\0\1\270\3\0\1\271\2\0\1\241\4\0\20\241"+
    "\1\374\15\241\15\0\1\2\17\0\17\240\1\375\6\240"+
    "\2\0\1\267\2\0\1\267\3\0\1\270\3\0\1\271"+
    "\2\0\1\241\4\0\24\241\1\376\11\241\15\0\1\346"+
    "\2\0\1\364\4\0\36\364\2\0\1\267\2\0\1\267"+
    "\3\0\1\270\3\0\1\346\2\0\1\327\4\0\14\327"+
    "\1\377\21\327\2\0\1\267\2\0\1\267\3\0\1\270"+
    "\3\0\1\332\2\0\1\306\4\0\24\306\1\u0100\11\306"+
    "\60\0\1\u0101\60\0\1\u0102\53\0\1\u0103\15\0\1\313"+
    "\2\0\1\u0104\12\0\1\315\4\0\7\315\1\20\26\315"+
    "\2\0\1\267\2\0\1\267\3\0\1\270\3\0\1\271"+
    "\2\0\1\241\4\0\1\u0105\35\241\2\0\1\267\2\0"+
    "\1\267\3\0\1\270\3\0\1\271\2\0\1\241\4\0"+
    "\31\241\1\u0106\4\241\20\0\1\240\4\0\14\240\1\u0107"+
    "\21\240\2\0\1\267\2\0\1\267\3\0\1\270\3\0"+
    "\1\271\2\0\1\241\4\0\31\241\1\u0108\4\241\2\0"+
    "\1\267\2\0\1\267\3\0\1\270\3\0\1\346\2\0"+
    "\1\327\4\0\24\327\1\u0109\11\327\2\0\1\267\2\0"+
    "\1\267\3\0\1\270\3\0\1\332\2\0\1\306\4\0"+
    "\10\306\1\u010a\25\306\35\0\1\u010b\66\0\1\u010c\66\0"+
    "\1\u010d\42\0\7\240\17\0\1\u010e\11\0\1\267\2\0"+
    "\1\267\3\0\1\270\3\0\1\271\2\0\1\241\4\0"+
    "\6\241\1\u010f\27\241\2\0\1\267\2\0\1\267\3\0"+
    "\1\270\3\0\1\271\2\0\1\241\4\0\23\241\1\324"+
    "\12\241\20\0\1\240\4\0\10\240\1\u0110\25\240\2\0"+
    "\1\267\2\0\1\267\3\0\1\270\3\0\1\271\2\0"+
    "\1\241\4\0\14\241\1\344\21\241\2\0\1\267\2\0"+
    "\1\267\3\0\1\270\3\0\1\346\2\0\1\327\4\0"+
    "\10\327\1\u0111\25\327\2\0\1\267\2\0\1\267\3\0"+
    "\1\270\3\0\1\332\2\0\1\306\4\0\1\u0112\35\306"+
    "\40\0\1\u0113\65\0\1\u0114\56\0\1\u0113\77\0\1\u0115"+
    "\2\0\1\u0116\5\0\1\267\2\0\1\267\3\0\1\270"+
    "\3\0\1\271\2\0\1\241\4\0\14\241\1\u0117\21\241"+
    "\20\0\1\240\4\0\22\240\1\u0118\13\240\2\0\1\267"+
    "\2\0\1\267\3\0\1\270\3\0\1\346\2\0\1\327"+
    "\4\0\1\u0119\35\327\2\0\1\267\2\0\1\267\3\0"+
    "\1\270\3\0\1\332\2\0\1\306\4\0\3\306\1\u011a"+
    "\32\306\52\0\1\u011b\55\0\1\u010b\62\0\1\u011c\4\0"+
    "\1\u011d\46\0\1\u011e\26\0\1\267\2\0\1\267\3\0"+
    "\1\270\3\0\1\271\2\0\1\241\4\0\10\241\1\u011f"+
    "\25\241\2\0\1\u0120\2\0\1\u0120\12\0\1\240\4\0"+
    "\36\240\2\0\1\267\2\0\1\267\3\0\1\270\3\0"+
    "\1\346\2\0\1\327\4\0\1\327\1\u0121\34\327\2\0"+
    "\1\267\2\0\1\267\3\0\1\270\3\0\1\332\2\0"+
    "\1\306\4\0\24\306\1\u0122\11\306\55\0\1\u0123\65\0"+
    "\1\u0124\60\0\1\u0125\53\0\1\u0126\15\0\1\267\2\0"+
    "\1\267\3\0\1\270\3\0\1\271\2\0\1\241\4\0"+
    "\22\241\1\u0127\13\241\35\0\26\u0128\2\0\1\267\2\0"+
    "\1\267\3\0\1\270\3\0\1\346\2\0\1\327\4\0"+
    "\25\327\1\u0129\10\327\2\0\1\267\2\0\1\267\3\0"+
    "\1\270\3\0\1\332\2\0\1\306\4\0\31\306\1\u012a"+
    "\4\306\35\0\1\u012b\66\0\1\u012c\66\0\1\u012d\17\0"+
    "\1\267\2\0\1\267\3\0\1\u012e\3\0\1\271\2\0"+
    "\1\241\4\0\36\241\12\0\1\u012f\5\0\1\u0128\4\0"+
    "\36\u0128\2\0\1\267\2\0\1\267\3\0\1\270\3\0"+
    "\1\346\2\0\1\327\4\0\22\327\1\u0130\13\327\2\0"+
    "\1\267\2\0\1\267\3\0\1\270\3\0\1\332\2\0"+
    "\1\306\4\0\14\306\1\u0131\21\306\40\0\1\u0132\65\0"+
    "\1\u0133\56\0\1\u0132\40\0\1\2\17\0\2\240\1\u0134"+
    "\23\240\2\0\1\267\2\0\1\267\3\0\1\270\3\0"+
    "\1\346\2\0\1\327\4\0\14\327\1\u0135\21\327\2\0"+
    "\1\267\2\0\1\267\3\0\1\270\3\0\1\332\2\0"+
    "\1\306\4\0\27\306\1\u0136\6\306\35\0\1\u011b\72\0"+
    "\1\u012b\35\0\1\240\4\0\10\240\1\u0137\25\240\2\0"+
    "\1\267\2\0\1\267\3\0\1\270\3\0\1\346\2\0"+
    "\1\327\4\0\10\327\1\u0138\25\327\2\0\1\267\2\0"+
    "\1\267\3\0\1\270\3\0\1\332\2\0\1\306\4\0"+
    "\25\306\1\u0139\10\306\20\0\1\240\4\0\13\240\1\u013a"+
    "\22\240\2\0\1\267\2\0\1\267\3\0\1\270\3\0"+
    "\1\346\2\0\1\327\4\0\24\327\1\u013b\11\327\2\0"+
    "\1\267\2\0\1\267\3\0\1\u013c\3\0\1\332\2\0"+
    "\1\306\4\0\36\306\20\0\1\240\4\0\14\240\1\u013d"+
    "\21\240\2\0\1\267\2\0\1\267\3\0\1\270\3\0"+
    "\1\346\2\0\1\327\4\0\25\327\1\u013e\10\327\15\0"+
    "\1\2\17\0\2\240\1\u013f\23\240\20\0\1\240\4\0"+
    "\24\240\1\u0140\11\240\2\0\1\267\2\0\1\267\3\0"+
    "\1\u0141\3\0\1\346\2\0\1\327\4\0\36\327\20\0"+
    "\1\240\4\0\10\240\1\u0142\25\240\20\0\1\240\4\0"+
    "\10\240\1\u0143\25\240\15\0\1\2\17\0\2\240\1\u0144"+
    "\23\240\20\0\1\240\4\0\13\240\1\u0145\22\240\2\0"+
    "\1\u0146\2\0\1\u0146\12\0\1\240\4\0\36\240\20\0"+
    "\1\240\4\0\10\240\1\u0147\25\240\20\0\1\240\4\0"+
    "\14\240\1\u0148\21\240\35\0\26\u0149\20\0\1\240\4\0"+
    "\13\240\1\u014a\22\240\20\0\1\240\4\0\24\240\1\u014b"+
    "\11\240\12\0\1\u014c\5\0\1\u0149\4\0\36\u0149\20\0"+
    "\1\240\4\0\14\240\1\u014d\21\240\20\0\1\240\4\0"+
    "\10\240\1\u014e\25\240\20\0\1\240\4\0\24\240\1\u014f"+
    "\11\240\2\0\1\u0150\2\0\1\u0150\12\0\1\240\4\0"+
    "\36\240\20\0\1\240\4\0\10\240\1\u0151\25\240\35\0"+
    "\26\u0152\2\0\1\u0153\2\0\1\u0153\12\0\1\240\4\0"+
    "\36\240\12\0\1\u0154\5\0\1\u0152\4\0\36\u0152\35\0"+
    "\26\u0155\12\0\1\u0156\5\0\1\u0155\4\0\36\u0155";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16473];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\2\1\2\11\22\1\2\0\1\11\1\0\1\1\1\0"+
    "\27\1\3\0\31\1\1\11\60\1\1\0\5\1\1\0"+
    "\31\1\1\0\3\1\1\0\7\1\1\0\12\1\1\0"+
    "\6\1\4\0\17\1\5\0\13\1\2\0\11\1\3\0"+
    "\7\1\4\0\6\1\4\0\4\1\4\0\4\1\4\0"+
    "\1\1\1\0\2\1\1\11\3\0\1\1\1\0\2\1"+
    "\3\0\1\1\1\11\2\1\2\0\22\1\1\0\2\1"+
    "\1\0\2\1\1\11\3\1\1\0\1\1\2\0\1\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[342];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    void escribirPR(String nuevo)
    {
        File archivo = new File("tokens.txt");
        FileWriter escribir;
        PrintWriter linea;
          try {
            archivo.createNewFile();
            escribir = new FileWriter(archivo, true);
            linea = new PrintWriter(escribir);
            linea.println("PALABRA RESERVADA: "+nuevo);
            linea.close();
            escribir.close();
            verificar();
        } catch (Exception e) {
            System.out.println("ERROR : " + e);
        }
    }
    void escribirIdentificador(String nuevo)
    {
        File archivo = new File("tokens.txt");
        FileWriter escribir;
        PrintWriter linea;
          try {
            archivo.createNewFile();
            escribir = new FileWriter(archivo, true);
            linea = new PrintWriter(escribir);
            linea.println("INDENTIFICADOR(ES): "+nuevo);
            linea.close();
            escribir.close();
            verificar();
        } catch (Exception e) {
            System.out.println("ERROR : " + e);
        }
    }
    void escribirSigno(String nuevo)
    {
        File archivo = new File("tokens.txt");
        FileWriter escribir;
        PrintWriter linea;
          try {
            archivo.createNewFile();
            escribir = new FileWriter(archivo, true);
            linea = new PrintWriter(escribir);
            linea.println("SIGNO: "+nuevo);
            linea.close();
            escribir.close();
            verificar();
        } catch (Exception e) {
            System.out.println("ERROR : " + e);
        }
    }
    void escribirOperando(String nuevo)
    {
        File archivo = new File("tokens.txt");
        FileWriter escribir;
        PrintWriter linea;
          try {
            archivo.createNewFile();
            escribir = new FileWriter(archivo, true);
            linea = new PrintWriter(escribir);
            linea.println("OPERADOR: "+nuevo);
            linea.close();
            escribir.close();
            verificar();
        } catch (Exception e) {
            System.out.println("ERROR : " + e);
        }
    }
    void escribirOperandoA(String nuevo)
    {
        File archivo = new File("tokens.txt");
        FileWriter escribir;
        PrintWriter linea;
          try {
            archivo.createNewFile();
            escribir = new FileWriter(archivo, true);
            linea = new PrintWriter(escribir);
            linea.println("OPERADOR ARITMETICO : "+nuevo);
            linea.close();
            escribir.close();
            verificar();
        } catch (Exception e) {
            System.out.println("ERROR : " + e);
        }
    }
    void escribirNumero(String nuevo)
    {
        File archivo = new File("tokens.txt");
        FileWriter escribir;
        PrintWriter linea;
          try {
            archivo.createNewFile();
            escribir = new FileWriter(archivo, true);
            linea = new PrintWriter(escribir);
            linea.println("NUMERO: "+nuevo);
            linea.close();
            escribir.close();
            verificar();
        } catch (Exception e) {
            System.out.println("ERROR : " + e);
        }
    }
    void escribirVariable(String nuevo)
    {
        File archivo = new File("tabla.txt");
        FileWriter escribir;
        PrintWriter linea;
          try {
            archivo.createNewFile();
            escribir = new FileWriter(archivo, true);
            linea = new PrintWriter(escribir);
            linea.println("VARIABLE: "+nuevo);
            linea.close();
            escribir.close();
            verificar();
        } catch (Exception e) {
            System.out.println("ERROR : " + e);
        }
    }
    void escribirClaseT(String nuevo)
    {
        File archivo = new File("tabla.txt");
        FileWriter escribir;
        PrintWriter linea;
          try {
            archivo.createNewFile();
            escribir = new FileWriter(archivo, true);
            linea = new PrintWriter(escribir);
            linea.println("CLASE: "+nuevo);
            linea.close();
            escribir.close();
            verificar();
        } catch (Exception e) {
            System.out.println("ERROR : " + e);
        }
    }
    void escribirFuncionT(String nuevo)
    {
        File archivo = new File("tabla.txt");
        FileWriter escribir;
        PrintWriter linea;
          try {
            archivo.createNewFile();
            escribir = new FileWriter(archivo, true);
            linea = new PrintWriter(escribir);
            linea.println("FUNCION: "+nuevo);
            linea.close();
            escribir.close();
            verificar();
        } catch (Exception e) {
            System.out.println("ERROR : " + e);
        }
    }
    void escribirError(String nuevo)
    {
        File archivo = new File("tokens.txt");
        archivo.delete();
        archivo = new File("tabla.txt");
        archivo.delete();
        archivo = new File("errores.txt");
        FileWriter escribir;
        PrintWriter linea;
          try {
            archivo.createNewFile();
            escribir = new FileWriter(archivo, true);
            linea = new PrintWriter(escribir);
            linea.println("ERROR ENCONTRADO EN LA LINEA: "+nuevo);
            linea.close();
            escribir.close();
        } catch (Exception e) {
            System.out.println("ERROR : " + e);
        }
    }
    void verificar()
    {
        File archivo = new File("errores.txt");
        if(archivo.exists())
        {
            archivo = new File("tokens.txt");
            archivo.delete();
            archivo = new File("tabla.txt");
            archivo.delete();
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Proyecto(java.io.Reader in) {
      File archivo = new File("tokens.txt");
    archivo.delete();
    archivo = new File("tabla.txt");
    archivo.delete();
    archivo = new File("errores.txt");
    archivo.delete();
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { String linea = String.valueOf(yyline+1);
    escribirError(linea);
            }
            // fall through
          case 26: break;
          case 2:
            { 
            }
            // fall through
          case 27: break;
          case 3:
            { System.out.print(yytext());
            }
            // fall through
          case 28: break;
          case 4:
            { escribirOperandoA(yytext());
            }
            // fall through
          case 29: break;
          case 5:
            { escribirSigno(yytext());
            }
            // fall through
          case 30: break;
          case 6:
            { escribirNumero(yytext());
            }
            // fall through
          case 31: break;
          case 7:
            { escribirSigno(":");
            }
            // fall through
          case 32: break;
          case 8:
            { escribirOperando(yytext());
            }
            // fall through
          case 33: break;
          case 9:
            { escribirIdentificador(yytext());
            }
            // fall through
          case 34: break;
          case 10:
            { escribirSigno("'");
    escribirSigno("'");
            }
            // fall through
          case 35: break;
          case 11:
            { escribirSigno("//");
            }
            // fall through
          case 36: break;
          case 12:
            { escribirPR(yytext());
            }
            // fall through
          case 37: break;
          case 13:
            { escribirSigno("Identacion " + yytext());
            }
            // fall through
          case 38: break;
          case 14:
            { escribirSigno("/*");
    escribirSigno("*/");
            }
            // fall through
          case 39: break;
          case 15:
            { String caden = yytext();
    caden = caden.substring(5,caden.length());
    escribirPR("real");
    escribirIdentificador(caden);
    escribirVariable(caden);
            }
            // fall through
          case 40: break;
          case 16:
            { escribirPR("clase");
    String cad = yytext();
    cad = cad.substring(6,cad.length());
    escribirIdentificador(cad);
    escribirClaseT(cad);
            }
            // fall through
          case 41: break;
          case 17:
            { String cad1 = yytext();
   int r = 0;
   boolean prueba = true;
   while ( prueba ) {
         if(cad1.charAt(r)==' ')
         {
            prueba = false;
         }
         else 
         {
            r++;
         }
    }
    String pr = cad1.substring(0,r);
    escribirPR(pr);
    escribirSigno("(");
    String caden = cad1.substring(r+1,cad1.length()-1);
    escribirIdentificador(caden);
    escribirFuncionT(caden);
            }
            // fall through
          case 42: break;
          case 18:
            { String caden = yytext();
    caden = caden.substring(7,caden.length());
    escribirPR("cadena");
    escribirIdentificador(caden);
    escribirVariable(caden);
            }
            // fall through
          case 43: break;
          case 19:
            { String caden = yytext();
    caden = caden.substring(7,caden.length());
    escribirPR("entero");
    escribirIdentificador(caden);
    escribirVariable(caden);
            }
            // fall through
          case 44: break;
          case 20:
            { String caden = yytext();
    caden = caden.substring(8,caden.length());
    escribirPR("boleano");
    escribirIdentificador(caden);
    escribirVariable(caden);
            }
            // fall through
          case 45: break;
          case 21:
            { escribirPR("extiende");
    String cad = yytext();
    cad = cad.substring(9,cad.length());
    escribirIdentificador(cad);
            }
            // fall through
          case 46: break;
          case 22:
            { escribirPR("real");
    escribirPR("real");
    escribirSigno("(");
    escribirSigno(")");
    String cad1 = yytext();
    int r = 0;
    boolean prueba = true;
    while ( prueba ) {
         if(cad1.charAt(r)=='(')
         {
            prueba = false;
         }
         else 
         {
            r++;
         }
    }
    String cad= cad1.substring(5,r);
    escribirPR(cad);
    escribirFuncionT("funcion especial: "+cad);
    cad=cad1.substring(r+5,cad1.length()-1);
    escribirIdentificador(cad);
    escribirVariable(cad);
            }
            // fall through
          case 47: break;
          case 23:
            { escribirPR("real");
    escribirPR("cadenaAReal");
    escribirPR("cadena");
    escribirFuncionT("Funcion especial: cadenaAReal");
    escribirSigno("(");
    escribirSigno(")");
    String cad = yytext();
    cad = cad.substring(24,cad.length()-1);
    escribirIdentificador(cad);
    escribirVariable(cad);
            }
            // fall through
          case 48: break;
          case 24:
            { escribirPR("entero");
    escribirPR("cadenaAEntero");
    escribirPR("cadena");
    escribirFuncionT("Funcion especial: cadenaAEntero");
    escribirSigno("(");
    escribirSigno(")");
    String cad = yytext();
    cad = cad.substring(28,cad.length()-1);
    escribirIdentificador(cad);
    escribirVariable(cad);
            }
            // fall through
          case 49: break;
          case 25:
            { escribirPR("boleano");
    escribirPR("cadenaABoleano");
    escribirPR("cadena");
    escribirFuncionT("Funcion especial: cadenaABoleano");
    escribirSigno("(");
    escribirSigno(")");
    String cad = yytext();
    cad = cad.substring(30,cad.length()-1);
    escribirIdentificador(cad);
    escribirVariable(cad);
            }
            // fall through
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Proyecto [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Proyecto scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Proyecto(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
