// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: src/main/java/com/alex/compis/jflex/archivo.flex

package com.alex.compis;
import java.io.*;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Proyecto {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\4\0\1\6\1\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\13\1\15\1\16\12\17\1\0\1\20\1\0"+
    "\1\21\3\0\1\22\1\23\2\24\1\25\14\24\1\26"+
    "\10\24\3\0\1\6\1\27\1\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\35\1\37\2\35\1\40"+
    "\1\41\1\42\1\43\2\35\1\44\1\45\1\46\5\35"+
    "\1\47\12\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\1\1\3\1\1\1\4\1\3"+
    "\1\5\1\6\1\7\1\5\5\10\1\0\1\11\2\0"+
    "\1\12\1\0\4\10\3\0\1\13\4\10\1\14\1\15"+
    "\7\10\1\0\3\10\6\16\1\10\2\0\1\17\1\5"+
    "\6\16\1\0\1\20\2\21\1\5\4\0\6\16\2\22"+
    "\2\5\1\21\2\5\5\0\4\16\1\5\1\22\1\20"+
    "\2\21\4\0\2\16\1\17\1\16\2\22\1\21\4\0"+
    "\2\16\1\0\1\16\1\22\1\21\4\0\2\16\1\0"+
    "\1\16\1\22\1\21\1\0\1\16\1\0\1\22\1\21"+
    "\5\0\1\16\1\0\1\22\1\21\4\0\1\16\1\0"+
    "\1\22\1\21\4\0\1\16\1\0\1\22\1\21\4\0"+
    "\1\17\1\23\4\0\1\22\1\21\3\0\1\5\5\0"+
    "\1\22\1\21\6\0\1\22\1\21\5\0\1\22\1\17"+
    "\4\0\1\22\3\0\1\17\12\0\1\24\27\0\1\25"+
    "\15\0\1\26\40\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\50\0\170\0\50\0\240\0\50"+
    "\0\310\0\360\0\50\0\50\0\u0118\0\u0140\0\u0168\0\u0190"+
    "\0\u01b8\0\u01e0\0\u0208\0\50\0\240\0\u0230\0\u0258\0\u0280"+
    "\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0398\0\u03c0"+
    "\0\u03e8\0\u0410\0\u0438\0\u0460\0\50\0\u0398\0\u0488\0\u04b0"+
    "\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0"+
    "\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708\0\u0730"+
    "\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0870"+
    "\0\u0898\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0"+
    "\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0"+
    "\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0\0\50\0\u0c08"+
    "\0\u0988\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20"+
    "\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38\0\u0e60"+
    "\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78\0\u0fa0"+
    "\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u1068\0\u1090\0\u10b8\0\u10e0"+
    "\0\u1108\0\u1130\0\u1158\0\u1180\0\u11a8\0\u11d0\0\u11f8\0\u1220"+
    "\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8\0\u1310\0\u1338\0\u1360"+
    "\0\u1388\0\u13b0\0\u13d8\0\u1400\0\u1428\0\u1450\0\u1478\0\u14a0"+
    "\0\u14c8\0\u14f0\0\u1518\0\u1540\0\u1568\0\u1590\0\u15b8\0\u15e0"+
    "\0\u1608\0\u1630\0\u1658\0\u1680\0\u16a8\0\u16d0\0\u16f8\0\u1720"+
    "\0\u1748\0\u1770\0\u1798\0\u17c0\0\u17e8\0\u1810\0\u1838\0\u1860"+
    "\0\50\0\u1888\0\u18b0\0\u18d8\0\u1900\0\u1928\0\u1950\0\u1978"+
    "\0\u19a0\0\u19c8\0\u11f8\0\u19f0\0\u1a18\0\u1a40\0\u1a68\0\u1a90"+
    "\0\u1ab8\0\u1ae0\0\u1b08\0\u1b30\0\u1b58\0\u1b80\0\u1ba8\0\u1bd0"+
    "\0\u1bf8\0\u1c20\0\u1c48\0\u1c70\0\u1c98\0\u1cc0\0\u1ce8\0\u1d10"+
    "\0\u1d38\0\u1d60\0\u1d88\0\u1db0\0\u1dd8\0\u1e00\0\u1e28\0\u1e50"+
    "\0\u1e78\0\u1ea0\0\u1ec8\0\u1ef0\0\u1f18\0\u1f40\0\u1f68\0\u1f90"+
    "\0\u1fb8\0\u1fe0\0\u2008\0\u2030\0\50\0\u2058\0\u2080\0\u20a8"+
    "\0\u20d0\0\u20f8\0\u2120\0\u2148\0\u2170\0\u2198\0\u21c0\0\u21e8"+
    "\0\u2210\0\u2238\0\u2260\0\u2288\0\u22b0\0\u22d8\0\u2300\0\u2328"+
    "\0\u2350\0\u2378\0\u23a0\0\u23c8\0\50\0\u23f0\0\u2418\0\u2440"+
    "\0\u2468\0\u2490\0\u24b8\0\u24e0\0\u2508\0\u2530\0\u2558\0\u2580"+
    "\0\u25a8\0\u25d0\0\50\0\u25f8\0\u2620\0\u2648\0\u2670\0\u2698"+
    "\0\u26c0\0\u26e8\0\u2710\0\u2738\0\u2760\0\u2788\0\u27b0\0\u27d8"+
    "\0\u2800\0\u2828\0\u2850\0\u2878\0\u28a0\0\u28c8\0\u28f0\0\u2918"+
    "\0\u2940\0\u2968\0\u2990\0\u29b8\0\u29e0\0\u2a08\0\u2a30\0\u2a58"+
    "\0\u2a80\0\u2aa8\0\u2ad0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\3\1\6\1\7\2\10"+
    "\2\6\2\2\1\11\1\12\1\13\1\14\5\15\1\2"+
    "\1\16\1\17\1\20\1\16\1\21\7\16\1\22\3\16"+
    "\52\0\1\23\2\0\1\23\44\0\1\2\54\0\1\24"+
    "\7\0\1\25\2\0\5\25\1\0\20\25\12\0\1\26"+
    "\3\0\1\27\46\0\1\30\1\0\1\12\2\0\26\15"+
    "\17\0\1\15\2\0\26\15\17\0\1\16\2\0\26\16"+
    "\17\0\1\16\2\0\21\16\1\31\4\16\17\0\1\16"+
    "\2\0\6\16\1\32\17\16\17\0\1\16\2\0\20\16"+
    "\1\33\5\16\17\0\1\16\2\0\12\16\1\34\13\16"+
    "\2\0\1\35\2\0\1\35\43\0\2\26\1\0\2\26"+
    "\4\0\1\36\1\26\2\0\1\37\1\26\2\0\26\26"+
    "\2\0\1\27\2\0\2\27\3\0\2\27\2\0\2\27"+
    "\2\0\5\27\1\0\20\27\17\0\1\40\47\0\1\16"+
    "\2\0\16\16\1\41\7\16\17\0\1\16\2\0\11\16"+
    "\1\42\14\16\17\0\1\16\2\0\24\16\1\43\1\16"+
    "\17\0\1\16\2\0\6\16\1\44\17\16\2\0\1\45"+
    "\2\0\1\45\43\0\2\26\1\0\2\26\4\0\1\36"+
    "\1\26\2\0\1\46\1\26\2\0\26\26\12\0\1\26"+
    "\52\0\1\30\1\0\1\40\47\0\1\16\2\0\12\16"+
    "\1\47\13\16\17\0\1\16\2\0\12\16\1\50\13\16"+
    "\17\0\1\16\2\0\12\16\1\51\13\16\17\0\1\16"+
    "\2\0\16\16\1\52\7\16\17\0\1\16\2\0\6\16"+
    "\1\53\17\16\17\0\1\16\2\0\20\16\1\54\5\16"+
    "\17\0\1\16\2\0\22\16\1\55\3\16\2\0\1\56"+
    "\2\0\1\56\11\0\1\16\2\0\26\16\17\0\1\16"+
    "\2\0\20\16\1\57\5\16\17\0\1\16\2\0\6\16"+
    "\1\60\17\16\17\0\1\16\2\0\21\16\1\61\4\16"+
    "\30\0\2\62\1\63\5\62\1\64\3\62\1\65\1\66"+
    "\1\67\1\62\17\0\1\16\2\0\21\16\1\70\4\16"+
    "\2\0\1\71\2\0\1\71\11\0\1\16\2\0\26\16"+
    "\2\0\1\72\2\0\1\72\11\0\1\16\2\0\26\16"+
    "\10\0\1\73\3\0\1\74\2\0\1\62\2\0\26\62"+
    "\10\0\1\73\3\0\1\74\2\0\1\62\2\0\6\62"+
    "\1\75\12\62\1\76\4\62\10\0\1\73\3\0\1\74"+
    "\2\0\1\62\2\0\21\62\1\77\4\62\10\0\1\73"+
    "\3\0\1\74\2\0\1\62\2\0\6\62\1\100\17\62"+
    "\10\0\1\73\3\0\1\74\2\0\1\62\2\0\12\62"+
    "\1\101\13\62\10\0\1\73\3\0\1\74\2\0\1\62"+
    "\2\0\6\62\1\102\17\62\2\0\1\103\2\0\1\103"+
    "\11\0\1\16\2\0\26\16\30\0\20\104\30\0\2\105"+
    "\1\106\15\105\14\0\1\107\14\0\1\110\1\111\1\0"+
    "\1\112\7\0\1\113\33\0\20\114\10\0\1\73\3\0"+
    "\1\74\2\0\1\62\2\0\11\62\1\115\14\62\10\0"+
    "\1\73\3\0\1\74\2\0\1\62\2\0\23\62\1\66"+
    "\2\62\10\0\1\73\3\0\1\74\2\0\1\62\2\0"+
    "\14\62\1\116\11\62\10\0\1\73\3\0\1\74\2\0"+
    "\1\62\2\0\15\62\1\117\10\62\10\0\1\73\3\0"+
    "\1\74\2\0\1\62\2\0\20\62\1\120\5\62\10\0"+
    "\1\73\3\0\1\74\2\0\1\62\2\0\20\62\1\121"+
    "\5\62\30\0\2\122\1\123\15\122\10\0\1\73\3\0"+
    "\1\124\2\0\1\104\2\0\26\104\10\0\1\73\3\0"+
    "\1\125\2\0\1\105\2\0\26\105\10\0\1\73\3\0"+
    "\1\125\2\0\1\105\2\0\6\105\1\126\17\105\1\0"+
    "\2\127\1\0\1\130\1\127\6\0\1\131\14\0\1\110"+
    "\1\111\1\0\1\112\7\0\1\113\46\0\1\132\34\0"+
    "\1\133\61\0\1\134\41\0\1\135\27\0\1\74\2\0"+
    "\1\114\2\0\26\114\10\0\1\73\3\0\1\74\2\0"+
    "\1\62\2\0\12\62\1\136\13\62\10\0\1\73\3\0"+
    "\1\74\2\0\1\62\2\0\6\62\1\137\17\62\10\0"+
    "\1\73\3\0\1\74\2\0\1\62\2\0\25\62\1\140"+
    "\10\0\1\73\3\0\1\74\2\0\1\62\2\0\21\62"+
    "\1\140\4\62\10\0\1\73\3\0\1\74\2\0\1\62"+
    "\2\0\14\62\1\141\11\62\10\0\1\73\3\0\1\142"+
    "\2\0\1\122\2\0\26\122\10\0\1\73\3\0\1\142"+
    "\2\0\1\122\2\0\6\122\1\143\17\122\30\0\20\144"+
    "\30\0\20\145\10\0\1\73\3\0\1\125\2\0\1\105"+
    "\2\0\11\105\1\146\14\105\2\0\1\127\105\0\1\147"+
    "\42\0\1\150\62\0\1\151\31\0\1\152\27\0\1\73"+
    "\3\0\1\74\2\0\1\62\2\0\20\62\1\153\5\62"+
    "\10\0\1\73\3\0\1\74\2\0\1\62\2\0\22\62"+
    "\1\154\3\62\10\0\1\155\3\0\1\74\2\0\1\62"+
    "\2\0\26\62\10\0\1\73\3\0\1\74\2\0\1\62"+
    "\2\0\12\62\1\156\13\62\30\0\20\157\10\0\1\73"+
    "\3\0\1\142\2\0\1\122\2\0\11\122\1\160\14\122"+
    "\14\0\1\124\2\0\1\144\2\0\26\144\14\0\1\125"+
    "\2\0\1\145\2\0\26\145\10\0\1\73\3\0\1\125"+
    "\2\0\1\105\2\0\12\105\1\161\13\105\34\0\1\162"+
    "\47\0\1\163\47\0\1\164\53\0\1\165\17\0\1\73"+
    "\3\0\1\74\2\0\1\62\2\0\6\62\1\166\17\62"+
    "\10\0\1\73\3\0\1\74\2\0\1\62\2\0\15\62"+
    "\1\167\10\62\14\0\1\107\14\0\1\110\1\111\1\0"+
    "\1\112\7\0\1\170\13\0\1\73\3\0\1\74\2\0"+
    "\1\62\2\0\20\62\1\171\5\62\14\0\1\142\2\0"+
    "\1\157\2\0\26\157\10\0\1\73\3\0\1\142\2\0"+
    "\1\122\2\0\12\122\1\172\13\122\10\0\1\73\3\0"+
    "\1\125\2\0\1\105\2\0\20\105\1\173\5\105\30\0"+
    "\1\174\61\0\1\175\51\0\1\176\5\0\1\177\2\0"+
    "\1\177\52\0\1\73\3\0\1\74\2\0\1\62\2\0"+
    "\1\200\25\62\10\0\1\73\3\0\1\74\2\0\1\62"+
    "\2\0\24\62\1\201\1\62\34\0\1\202\23\0\1\73"+
    "\3\0\1\74\2\0\1\62\2\0\24\62\1\203\1\62"+
    "\10\0\1\73\3\0\1\142\2\0\1\122\2\0\20\122"+
    "\1\204\5\122\10\0\1\73\3\0\1\125\2\0\1\105"+
    "\2\0\6\105\1\205\17\105\42\0\1\176\35\0\1\165"+
    "\62\0\1\165\34\0\20\206\10\0\1\73\3\0\1\74"+
    "\2\0\1\62\2\0\4\62\1\207\21\62\10\0\1\73"+
    "\3\0\1\74\2\0\1\62\2\0\17\62\1\120\6\62"+
    "\30\0\1\210\27\0\1\73\3\0\1\74\2\0\1\62"+
    "\2\0\12\62\1\140\13\62\10\0\1\73\3\0\1\142"+
    "\2\0\1\122\2\0\6\122\1\211\17\122\10\0\1\73"+
    "\3\0\1\125\2\0\1\105\2\0\1\212\25\105\1\0"+
    "\2\127\1\0\1\130\1\127\6\0\1\213\2\0\1\206"+
    "\2\0\7\206\1\214\1\215\1\206\1\216\7\206\1\217"+
    "\3\206\10\0\1\73\3\0\1\74\2\0\1\62\2\0"+
    "\12\62\1\220\13\62\40\0\1\221\17\0\1\73\3\0"+
    "\1\142\2\0\1\122\2\0\1\222\25\122\10\0\1\73"+
    "\3\0\1\125\2\0\1\105\2\0\3\105\1\223\22\105"+
    "\1\0\2\127\1\0\1\130\1\127\6\0\1\131\13\0"+
    "\1\206\1\214\1\215\1\206\1\216\7\206\1\217\3\206"+
    "\1\0\2\127\1\0\1\130\1\127\6\0\1\213\2\0"+
    "\1\206\2\0\7\206\1\214\1\215\1\206\1\216\6\206"+
    "\1\224\1\217\3\206\1\0\2\127\1\0\1\130\1\127"+
    "\6\0\1\213\2\0\1\206\2\0\6\206\1\225\1\214"+
    "\1\215\1\206\1\216\7\206\1\217\3\206\1\0\2\127"+
    "\1\0\1\130\1\127\6\0\1\213\2\0\1\206\2\0"+
    "\7\206\1\214\1\215\1\206\1\216\5\206\1\226\1\206"+
    "\1\217\3\206\1\0\2\127\1\0\1\130\1\127\6\0"+
    "\1\213\2\0\1\206\2\0\7\206\1\214\1\215\1\206"+
    "\1\227\7\206\1\217\3\206\10\0\1\73\3\0\1\74"+
    "\2\0\1\62\2\0\6\62\1\230\17\62\2\0\1\231"+
    "\2\0\1\231\52\0\1\73\3\0\1\142\2\0\1\122"+
    "\2\0\1\122\1\232\24\122\10\0\1\73\3\0\1\125"+
    "\2\0\1\105\2\0\20\105\1\233\5\105\1\0\2\127"+
    "\1\0\1\130\1\127\6\0\1\213\2\0\1\206\2\0"+
    "\7\206\1\214\1\215\1\206\1\216\3\206\1\234\3\206"+
    "\1\217\3\206\1\0\2\127\1\0\1\130\1\127\6\0"+
    "\1\213\2\0\1\206\2\0\7\206\1\214\1\215\1\235"+
    "\1\216\7\206\1\217\3\206\1\0\2\127\1\0\1\130"+
    "\1\127\6\0\1\213\2\0\1\206\2\0\7\206\1\214"+
    "\1\215\1\206\1\216\7\206\1\217\1\206\1\236\1\206"+
    "\1\0\2\127\1\0\1\130\1\127\6\0\1\213\2\0"+
    "\1\206\2\0\6\206\1\237\1\214\1\215\1\206\1\216"+
    "\5\206\1\226\1\206\1\217\3\206\10\0\1\73\3\0"+
    "\1\74\2\0\1\62\2\0\16\62\1\240\7\62\30\0"+
    "\20\241\10\0\1\73\3\0\1\142\2\0\1\122\2\0"+
    "\21\122\1\242\4\122\10\0\1\73\3\0\1\125\2\0"+
    "\1\105\2\0\24\105\1\243\1\105\1\0\2\127\1\0"+
    "\1\130\1\127\6\0\1\213\2\0\1\206\2\0\7\206"+
    "\1\214\1\215\1\206\1\244\7\206\1\217\3\206\1\0"+
    "\2\127\1\0\1\130\1\127\6\0\1\213\2\0\1\206"+
    "\2\0\7\206\1\214\1\215\1\206\1\245\7\206\1\217"+
    "\3\206\1\0\2\127\1\0\1\130\1\127\6\0\1\213"+
    "\2\0\1\206\2\0\7\206\1\214\1\215\1\206\1\246"+
    "\7\206\1\217\3\206\1\0\2\127\1\0\1\130\1\127"+
    "\6\0\1\213\2\0\1\206\2\0\7\206\1\214\1\215"+
    "\1\206\1\216\3\206\1\247\3\206\1\217\3\206\10\0"+
    "\1\250\3\0\1\74\2\0\1\62\2\0\26\62\1\0"+
    "\2\127\1\0\1\130\1\127\3\0\1\251\2\0\1\213"+
    "\2\0\1\241\2\0\7\241\1\252\1\253\1\241\1\254"+
    "\7\241\1\255\3\241\10\0\1\73\3\0\1\142\2\0"+
    "\1\122\2\0\16\122\1\256\7\122\10\0\1\73\3\0"+
    "\1\125\2\0\1\105\2\0\12\105\1\257\13\105\1\0"+
    "\2\127\1\0\1\130\1\127\6\0\1\213\2\0\1\206"+
    "\2\0\6\206\1\260\1\214\1\215\1\206\1\216\5\206"+
    "\1\226\1\206\1\217\3\206\1\0\2\127\1\0\1\130"+
    "\1\127\6\0\1\213\2\0\1\206\2\0\7\206\1\214"+
    "\1\215\1\206\1\216\5\206\1\261\1\206\1\217\3\206"+
    "\1\0\2\127\1\0\1\130\1\127\6\0\1\213\2\0"+
    "\1\206\2\0\7\206\1\214\1\215\1\206\1\216\5\206"+
    "\1\226\1\206\1\262\3\206\1\0\1\127\1\263\1\0"+
    "\1\130\1\263\6\0\1\213\2\0\1\206\2\0\7\206"+
    "\1\214\1\215\1\206\1\216\7\206\1\217\3\206\14\0"+
    "\1\107\14\0\1\110\1\264\1\0\1\112\7\0\1\113"+
    "\4\0\2\127\1\0\1\130\1\127\3\0\1\251\2\0"+
    "\1\213\2\0\1\241\2\0\7\241\1\252\1\253\1\241"+
    "\1\254\6\241\1\265\1\255\3\241\1\0\2\127\1\0"+
    "\1\130\1\127\3\0\1\251\2\0\1\213\2\0\1\241"+
    "\2\0\6\241\1\266\1\252\1\253\1\241\1\254\7\241"+
    "\1\255\3\241\1\0\2\127\1\0\1\130\1\127\3\0"+
    "\1\251\2\0\1\213\2\0\1\241\2\0\7\241\1\252"+
    "\1\253\1\241\1\254\5\241\1\267\1\241\1\255\3\241"+
    "\1\0\2\127\1\0\1\130\1\127\3\0\1\251\2\0"+
    "\1\213\2\0\1\241\2\0\7\241\1\252\1\253\1\241"+
    "\1\270\7\241\1\255\3\241\10\0\1\73\3\0\1\142"+
    "\2\0\1\122\2\0\12\122\1\271\13\122\10\0\1\73"+
    "\3\0\1\125\2\0\1\105\2\0\22\105\1\272\3\105"+
    "\1\0\2\127\1\0\1\130\1\127\6\0\1\213\2\0"+
    "\1\206\2\0\7\206\1\214\1\215\1\206\1\216\5\206"+
    "\1\273\1\206\1\217\3\206\1\0\2\127\1\0\1\130"+
    "\1\127\6\0\1\213\2\0\1\206\2\0\6\206\1\247"+
    "\1\214\1\215\1\206\1\216\7\206\1\217\1\206\1\236"+
    "\1\206\1\0\2\127\1\0\1\130\1\127\6\0\1\213"+
    "\2\0\1\206\2\0\7\206\1\214\1\215\1\206\1\227"+
    "\6\206\1\247\1\217\3\206\30\0\1\274\20\0\2\127"+
    "\1\0\1\130\1\127\3\0\1\251\2\0\1\213\2\0"+
    "\1\241\2\0\7\241\1\252\1\253\1\241\1\254\3\241"+
    "\1\275\3\241\1\255\3\241\1\0\2\127\1\0\1\130"+
    "\1\127\3\0\1\251\2\0\1\213\2\0\1\241\2\0"+
    "\7\241\1\252\1\253\1\276\1\254\7\241\1\255\3\241"+
    "\1\0\2\127\1\0\1\130\1\127\3\0\1\251\2\0"+
    "\1\213\2\0\1\241\2\0\7\241\1\252\1\253\1\241"+
    "\1\254\7\241\1\255\1\241\1\277\1\241\1\0\2\127"+
    "\1\0\1\130\1\127\3\0\1\251\2\0\1\213\2\0"+
    "\1\241\2\0\6\241\1\300\1\252\1\253\1\241\1\254"+
    "\5\241\1\267\1\241\1\255\3\241\10\0\1\73\3\0"+
    "\1\142\2\0\1\122\2\0\6\122\1\301\17\122\10\0"+
    "\1\73\3\0\1\125\2\0\1\105\2\0\21\105\1\302"+
    "\4\105\1\0\2\127\1\0\1\130\1\127\6\0\1\213"+
    "\2\0\1\206\2\0\7\206\1\214\1\215\1\206\1\216"+
    "\6\206\1\247\1\217\3\206\33\0\1\303\15\0\2\127"+
    "\1\0\1\130\1\127\3\0\1\251\2\0\1\213\2\0"+
    "\1\241\2\0\7\241\1\252\1\253\1\241\1\304\7\241"+
    "\1\255\3\241\1\0\2\127\1\0\1\130\1\127\3\0"+
    "\1\251\2\0\1\213\2\0\1\241\2\0\7\241\1\252"+
    "\1\253\1\241\1\305\7\241\1\255\3\241\1\0\2\127"+
    "\1\0\1\130\1\127\3\0\1\251\2\0\1\213\2\0"+
    "\1\241\2\0\7\241\1\252\1\253\1\241\1\306\7\241"+
    "\1\255\3\241\1\0\2\127\1\0\1\130\1\127\3\0"+
    "\1\251\2\0\1\213\2\0\1\241\2\0\7\241\1\252"+
    "\1\253\1\241\1\254\3\241\1\307\3\241\1\255\3\241"+
    "\10\0\1\73\3\0\1\142\2\0\1\122\2\0\20\122"+
    "\1\310\5\122\10\0\1\311\3\0\1\125\2\0\1\105"+
    "\2\0\26\105\34\0\1\312\14\0\2\127\1\0\1\130"+
    "\1\127\3\0\1\251\2\0\1\213\2\0\1\241\2\0"+
    "\6\241\1\313\1\252\1\253\1\241\1\254\5\241\1\267"+
    "\1\241\1\255\3\241\1\0\2\127\1\0\1\130\1\127"+
    "\3\0\1\251\2\0\1\213\2\0\1\241\2\0\7\241"+
    "\1\252\1\253\1\241\1\254\5\241\1\314\1\241\1\255"+
    "\3\241\1\0\2\127\1\0\1\130\1\127\3\0\1\251"+
    "\2\0\1\213\2\0\1\241\2\0\7\241\1\252\1\253"+
    "\1\241\1\254\5\241\1\267\1\241\1\315\3\241\1\0"+
    "\1\127\1\263\1\0\1\130\1\263\3\0\1\251\2\0"+
    "\1\213\2\0\1\241\2\0\7\241\1\252\1\253\1\241"+
    "\1\254\7\241\1\255\3\241\10\0\1\73\3\0\1\142"+
    "\2\0\1\122\2\0\21\122\1\316\4\122\14\0\1\107"+
    "\14\0\1\110\1\317\1\0\1\112\7\0\1\113\45\0"+
    "\1\320\6\0\2\127\1\0\1\130\1\127\3\0\1\251"+
    "\2\0\1\213\2\0\1\241\2\0\7\241\1\252\1\253"+
    "\1\241\1\254\5\241\1\321\1\241\1\255\3\241\1\0"+
    "\2\127\1\0\1\130\1\127\3\0\1\251\2\0\1\213"+
    "\2\0\1\241\2\0\6\241\1\307\1\252\1\253\1\241"+
    "\1\254\7\241\1\255\1\241\1\277\1\241\1\0\2\127"+
    "\1\0\1\130\1\127\3\0\1\251\2\0\1\213\2\0"+
    "\1\241\2\0\7\241\1\252\1\253\1\241\1\270\6\241"+
    "\1\307\1\255\3\241\10\0\1\322\3\0\1\142\2\0"+
    "\1\122\2\0\26\122\30\0\1\323\47\0\1\324\20\0"+
    "\2\127\1\0\1\130\1\127\3\0\1\251\2\0\1\213"+
    "\2\0\1\241\2\0\7\241\1\252\1\253\1\241\1\254"+
    "\6\241\1\307\1\255\3\241\14\0\1\107\14\0\1\110"+
    "\1\325\1\0\1\112\7\0\1\113\36\0\1\326\16\0"+
    "\1\327\2\0\1\327\72\0\1\330\53\0\1\331\43\0"+
    "\20\332\33\0\1\333\56\0\1\334\6\0\2\127\1\0"+
    "\1\130\1\127\3\0\1\335\2\0\1\213\2\0\1\332"+
    "\2\0\7\332\1\336\1\337\1\332\1\340\7\332\1\341"+
    "\3\332\34\0\1\342\43\0\1\343\20\0\2\127\1\0"+
    "\1\130\1\127\3\0\1\335\2\0\1\213\2\0\1\332"+
    "\2\0\7\332\1\336\1\337\1\332\1\340\6\332\1\344"+
    "\1\341\3\332\1\0\2\127\1\0\1\130\1\127\3\0"+
    "\1\335\2\0\1\213\2\0\1\332\2\0\6\332\1\345"+
    "\1\336\1\337\1\332\1\340\7\332\1\341\3\332\1\0"+
    "\2\127\1\0\1\130\1\127\3\0\1\335\2\0\1\213"+
    "\2\0\1\332\2\0\7\332\1\336\1\337\1\332\1\340"+
    "\5\332\1\346\1\332\1\341\3\332\1\0\2\127\1\0"+
    "\1\130\1\127\3\0\1\335\2\0\1\213\2\0\1\332"+
    "\2\0\7\332\1\336\1\337\1\332\1\347\7\332\1\341"+
    "\3\332\42\0\1\350\7\0\1\351\2\0\1\351\43\0"+
    "\2\127\1\0\1\130\1\127\3\0\1\335\2\0\1\213"+
    "\2\0\1\332\2\0\7\332\1\336\1\337\1\332\1\340"+
    "\3\332\1\352\3\332\1\341\3\332\1\0\2\127\1\0"+
    "\1\130\1\127\3\0\1\335\2\0\1\213\2\0\1\332"+
    "\2\0\7\332\1\336\1\337\1\353\1\340\7\332\1\341"+
    "\3\332\1\0\2\127\1\0\1\130\1\127\3\0\1\335"+
    "\2\0\1\213\2\0\1\332\2\0\7\332\1\336\1\337"+
    "\1\332\1\340\7\332\1\341\1\332\1\354\1\332\1\0"+
    "\2\127\1\0\1\130\1\127\3\0\1\335\2\0\1\213"+
    "\2\0\1\332\2\0\6\332\1\355\1\336\1\337\1\332"+
    "\1\340\5\332\1\346\1\332\1\341\3\332\30\0\1\356"+
    "\47\0\20\357\1\0\2\127\1\0\1\130\1\127\3\0"+
    "\1\335\2\0\1\213\2\0\1\332\2\0\7\332\1\336"+
    "\1\337\1\332\1\360\7\332\1\341\3\332\1\0\2\127"+
    "\1\0\1\130\1\127\3\0\1\335\2\0\1\213\2\0"+
    "\1\332\2\0\7\332\1\336\1\337\1\332\1\361\7\332"+
    "\1\341\3\332\1\0\2\127\1\0\1\130\1\127\3\0"+
    "\1\335\2\0\1\213\2\0\1\332\2\0\7\332\1\336"+
    "\1\337\1\332\1\362\7\332\1\341\3\332\1\0\2\127"+
    "\1\0\1\130\1\127\3\0\1\335\2\0\1\213\2\0"+
    "\1\332\2\0\7\332\1\336\1\337\1\332\1\340\3\332"+
    "\1\363\3\332\1\341\3\332\2\0\1\364\2\0\1\364"+
    "\43\0\2\127\1\0\1\130\1\127\3\0\1\365\2\0"+
    "\1\213\2\0\1\357\2\0\7\357\1\366\1\367\1\357"+
    "\1\370\7\357\1\371\3\357\1\0\2\127\1\0\1\130"+
    "\1\127\3\0\1\335\2\0\1\213\2\0\1\332\2\0"+
    "\6\332\1\372\1\336\1\337\1\332\1\340\5\332\1\346"+
    "\1\332\1\341\3\332\1\0\2\127\1\0\1\130\1\127"+
    "\3\0\1\335\2\0\1\213\2\0\1\332\2\0\7\332"+
    "\1\336\1\337\1\332\1\340\5\332\1\373\1\332\1\341"+
    "\3\332\1\0\2\127\1\0\1\130\1\127\3\0\1\335"+
    "\2\0\1\213\2\0\1\332\2\0\7\332\1\336\1\337"+
    "\1\332\1\340\5\332\1\346\1\332\1\374\3\332\1\0"+
    "\1\127\1\263\1\0\1\130\1\263\3\0\1\335\2\0"+
    "\1\213\2\0\1\332\2\0\7\332\1\336\1\337\1\332"+
    "\1\340\7\332\1\341\3\332\30\0\20\375\1\0\2\127"+
    "\1\0\1\130\1\127\3\0\1\365\2\0\1\213\2\0"+
    "\1\357\2\0\7\357\1\366\1\367\1\357\1\370\6\357"+
    "\1\376\1\371\3\357\1\0\2\127\1\0\1\130\1\127"+
    "\3\0\1\365\2\0\1\213\2\0\1\357\2\0\6\357"+
    "\1\377\1\366\1\367\1\357\1\370\7\357\1\371\3\357"+
    "\1\0\2\127\1\0\1\130\1\127\3\0\1\365\2\0"+
    "\1\213\2\0\1\357\2\0\7\357\1\366\1\367\1\357"+
    "\1\370\5\357\1\u0100\1\357\1\371\3\357\1\0\2\127"+
    "\1\0\1\130\1\127\3\0\1\365\2\0\1\213\2\0"+
    "\1\357\2\0\7\357\1\366\1\367\1\357\1\u0101\7\357"+
    "\1\371\3\357\1\0\2\127\1\0\1\130\1\127\3\0"+
    "\1\335\2\0\1\213\2\0\1\332\2\0\7\332\1\336"+
    "\1\337\1\332\1\340\5\332\1\u0102\1\332\1\341\3\332"+
    "\1\0\2\127\1\0\1\130\1\127\3\0\1\335\2\0"+
    "\1\213\2\0\1\332\2\0\6\332\1\363\1\336\1\337"+
    "\1\332\1\340\7\332\1\341\1\332\1\354\1\332\1\0"+
    "\2\127\1\0\1\130\1\127\3\0\1\335\2\0\1\213"+
    "\2\0\1\332\2\0\7\332\1\336\1\337\1\332\1\347"+
    "\6\332\1\363\1\341\3\332\1\0\2\127\1\0\1\130"+
    "\1\127\3\0\1\u0103\2\0\1\213\2\0\1\375\2\0"+
    "\7\375\1\u0104\1\u0105\1\375\1\u0106\7\375\1\u0107\3\375"+
    "\1\0\2\127\1\0\1\130\1\127\3\0\1\365\2\0"+
    "\1\213\2\0\1\357\2\0\7\357\1\366\1\367\1\357"+
    "\1\370\3\357\1\u0108\3\357\1\371\3\357\1\0\2\127"+
    "\1\0\1\130\1\127\3\0\1\365\2\0\1\213\2\0"+
    "\1\357\2\0\7\357\1\366\1\367\1\u0109\1\370\7\357"+
    "\1\371\3\357\1\0\2\127\1\0\1\130\1\127\3\0"+
    "\1\365\2\0\1\213\2\0\1\357\2\0\7\357\1\366"+
    "\1\367\1\357\1\370\7\357\1\371\1\357\1\u010a\1\357"+
    "\1\0\2\127\1\0\1\130\1\127\3\0\1\365\2\0"+
    "\1\213\2\0\1\357\2\0\6\357\1\u010b\1\366\1\367"+
    "\1\357\1\370\5\357\1\u0100\1\357\1\371\3\357\1\0"+
    "\2\127\1\0\1\130\1\127\3\0\1\335\2\0\1\213"+
    "\2\0\1\332\2\0\7\332\1\336\1\337\1\332\1\340"+
    "\6\332\1\363\1\341\3\332\1\0\2\127\1\0\1\130"+
    "\1\127\3\0\1\u0103\2\0\1\213\2\0\1\375\2\0"+
    "\7\375\1\u0104\1\u0105\1\375\1\u0106\6\375\1\u010c\1\u0107"+
    "\3\375\1\0\2\127\1\0\1\130\1\127\3\0\1\u0103"+
    "\2\0\1\213\2\0\1\375\2\0\6\375\1\u010d\1\u0104"+
    "\1\u0105\1\375\1\u0106\7\375\1\u0107\3\375\1\0\2\127"+
    "\1\0\1\130\1\127\3\0\1\u0103\2\0\1\213\2\0"+
    "\1\375\2\0\7\375\1\u0104\1\u0105\1\375\1\u0106\5\375"+
    "\1\u010e\1\375\1\u0107\3\375\1\0\2\127\1\0\1\130"+
    "\1\127\3\0\1\u0103\2\0\1\213\2\0\1\375\2\0"+
    "\7\375\1\u0104\1\u0105\1\375\1\u010f\7\375\1\u0107\3\375"+
    "\1\0\2\127\1\0\1\130\1\127\3\0\1\365\2\0"+
    "\1\213\2\0\1\357\2\0\7\357\1\366\1\367\1\357"+
    "\1\u0110\7\357\1\371\3\357\1\0\2\127\1\0\1\130"+
    "\1\127\3\0\1\365\2\0\1\213\2\0\1\357\2\0"+
    "\7\357\1\366\1\367\1\357\1\u0111\7\357\1\371\3\357"+
    "\1\0\2\127\1\0\1\130\1\127\3\0\1\365\2\0"+
    "\1\213\2\0\1\357\2\0\7\357\1\366\1\367\1\357"+
    "\1\u0112\7\357\1\371\3\357\1\0\2\127\1\0\1\130"+
    "\1\127\3\0\1\365\2\0\1\213\2\0\1\357\2\0"+
    "\7\357\1\366\1\367\1\357\1\370\3\357\1\u0113\3\357"+
    "\1\371\3\357\1\0\2\127\1\0\1\130\1\127\3\0"+
    "\1\u0103\2\0\1\213\2\0\1\375\2\0\7\375\1\u0104"+
    "\1\u0105\1\375\1\u0106\3\375\1\u0114\3\375\1\u0107\3\375"+
    "\1\0\2\127\1\0\1\130\1\127\3\0\1\u0103\2\0"+
    "\1\213\2\0\1\375\2\0\7\375\1\u0104\1\u0105\1\u0115"+
    "\1\u0106\7\375\1\u0107\3\375\1\0\2\127\1\0\1\130"+
    "\1\127\3\0\1\u0103\2\0\1\213\2\0\1\375\2\0"+
    "\7\375\1\u0104\1\u0105\1\375\1\u0106\7\375\1\u0107\1\375"+
    "\1\u0116\1\375\1\0\2\127\1\0\1\130\1\127\3\0"+
    "\1\u0103\2\0\1\213\2\0\1\375\2\0\6\375\1\u0117"+
    "\1\u0104\1\u0105\1\375\1\u0106\5\375\1\u010e\1\375\1\u0107"+
    "\3\375\1\0\2\127\1\0\1\130\1\127\3\0\1\365"+
    "\2\0\1\213\2\0\1\357\2\0\6\357\1\u0118\1\366"+
    "\1\367\1\357\1\370\5\357\1\u0100\1\357\1\371\3\357"+
    "\1\0\2\127\1\0\1\130\1\127\3\0\1\365\2\0"+
    "\1\213\2\0\1\357\2\0\7\357\1\366\1\367\1\357"+
    "\1\370\5\357\1\u0119\1\357\1\371\3\357\1\0\2\127"+
    "\1\0\1\130\1\127\3\0\1\365\2\0\1\213\2\0"+
    "\1\357\2\0\7\357\1\366\1\367\1\357\1\370\5\357"+
    "\1\u0100\1\357\1\u011a\3\357\1\0\1\127\1\263\1\0"+
    "\1\130\1\263\3\0\1\365\2\0\1\213\2\0\1\357"+
    "\2\0\7\357\1\366\1\367\1\357\1\370\7\357\1\371"+
    "\3\357\1\0\2\127\1\0\1\130\1\127\3\0\1\u0103"+
    "\2\0\1\213\2\0\1\375\2\0\7\375\1\u0104\1\u0105"+
    "\1\375\1\u011b\7\375\1\u0107\3\375\1\0\2\127\1\0"+
    "\1\130\1\127\3\0\1\u0103\2\0\1\213\2\0\1\375"+
    "\2\0\7\375\1\u0104\1\u0105\1\375\1\u011c\7\375\1\u0107"+
    "\3\375\1\0\2\127\1\0\1\130\1\127\3\0\1\u0103"+
    "\2\0\1\213\2\0\1\375\2\0\7\375\1\u0104\1\u0105"+
    "\1\375\1\u011d\7\375\1\u0107\3\375\1\0\2\127\1\0"+
    "\1\130\1\127\3\0\1\u0103\2\0\1\213\2\0\1\375"+
    "\2\0\7\375\1\u0104\1\u0105\1\375\1\u0106\3\375\1\u011e"+
    "\3\375\1\u0107\3\375\1\0\2\127\1\0\1\130\1\127"+
    "\3\0\1\365\2\0\1\213\2\0\1\357\2\0\7\357"+
    "\1\366\1\367\1\357\1\370\5\357\1\u011f\1\357\1\371"+
    "\3\357\1\0\2\127\1\0\1\130\1\127\3\0\1\365"+
    "\2\0\1\213\2\0\1\357\2\0\6\357\1\u0113\1\366"+
    "\1\367\1\357\1\370\7\357\1\371\1\357\1\u010a\1\357"+
    "\1\0\2\127\1\0\1\130\1\127\3\0\1\365\2\0"+
    "\1\213\2\0\1\357\2\0\7\357\1\366\1\367\1\357"+
    "\1\u0101\6\357\1\u0113\1\371\3\357\1\0\2\127\1\0"+
    "\1\130\1\127\3\0\1\u0103\2\0\1\213\2\0\1\375"+
    "\2\0\6\375\1\u0120\1\u0104\1\u0105\1\375\1\u0106\5\375"+
    "\1\u010e\1\375\1\u0107\3\375\1\0\2\127\1\0\1\130"+
    "\1\127\3\0\1\u0103\2\0\1\213\2\0\1\375\2\0"+
    "\7\375\1\u0104\1\u0105\1\375\1\u0106\5\375\1\u0121\1\375"+
    "\1\u0107\3\375\1\0\2\127\1\0\1\130\1\127\3\0"+
    "\1\u0103\2\0\1\213\2\0\1\375\2\0\7\375\1\u0104"+
    "\1\u0105\1\375\1\u0106\5\375\1\u010e\1\375\1\u0122\3\375"+
    "\1\0\1\127\1\263\1\0\1\130\1\263\3\0\1\u0103"+
    "\2\0\1\213\2\0\1\375\2\0\7\375\1\u0104\1\u0105"+
    "\1\375\1\u0106\7\375\1\u0107\3\375\1\0\2\127\1\0"+
    "\1\130\1\127\3\0\1\365\2\0\1\213\2\0\1\357"+
    "\2\0\7\357\1\366\1\367\1\357\1\370\6\357\1\u0113"+
    "\1\371\3\357\1\0\2\127\1\0\1\130\1\127\3\0"+
    "\1\u0103\2\0\1\213\2\0\1\375\2\0\7\375\1\u0104"+
    "\1\u0105\1\375\1\u0106\5\375\1\u0123\1\375\1\u0107\3\375"+
    "\1\0\2\127\1\0\1\130\1\127\3\0\1\u0103\2\0"+
    "\1\213\2\0\1\375\2\0\6\375\1\u011e\1\u0104\1\u0105"+
    "\1\375\1\u0106\7\375\1\u0107\1\375\1\u0116\1\375\1\0"+
    "\2\127\1\0\1\130\1\127\3\0\1\u0103\2\0\1\213"+
    "\2\0\1\375\2\0\7\375\1\u0104\1\u0105\1\375\1\u010f"+
    "\6\375\1\u011e\1\u0107\3\375\1\0\2\127\1\0\1\130"+
    "\1\127\3\0\1\u0103\2\0\1\213\2\0\1\375\2\0"+
    "\7\375\1\u0104\1\u0105\1\375\1\u0106\6\375\1\u011e\1\u0107"+
    "\3\375";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\2\1\2\11\6\1\1\0\1\11\2\0\1\1\1\0"+
    "\4\1\3\0\5\1\1\11\10\1\1\0\12\1\2\0"+
    "\10\1\1\0\4\1\4\0\13\1\1\11\1\1\5\0"+
    "\11\1\4\0\7\1\4\0\2\1\1\0\3\1\4\0"+
    "\2\1\1\0\3\1\1\0\1\1\1\0\2\1\5\0"+
    "\1\1\1\0\2\1\4\0\1\1\1\0\2\1\4\0"+
    "\1\1\1\0\2\1\4\0\1\1\1\11\4\0\2\1"+
    "\3\0\1\1\5\0\2\1\6\0\2\1\5\0\2\1"+
    "\4\0\1\1\3\0\1\1\12\0\1\11\27\0\1\11"+
    "\15\0\1\11\40\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Proyecto(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 23: break;
          case 2:
            { System.out.print(yytext());
            }
            // fall through
          case 24: break;
          case 3:
            { System.out.println("encontre un operando aritmetico " + yytext());
            }
            // fall through
          case 25: break;
          case 4:
            { System.out.println("encontre un parentesis abierto" + yytext());
            }
            // fall through
          case 26: break;
          case 5:
            { System.out.println("Se encontro un error " + yytext());
            }
            // fall through
          case 27: break;
          case 6:
            { System.out.println("encontre un punto y coma " + yytext());
            }
            // fall through
          case 28: break;
          case 7:
            { System.out.println("encontre un Operando =  " + yytext());
            }
            // fall through
          case 29: break;
          case 8:
            { System.out.println("encontre un identificador  " + yytext());
            }
            // fall through
          case 30: break;
          case 9:
            { System.out.println("encontre una cadena de texto " + yytext());
            }
            // fall through
          case 31: break;
          case 10:
            { System.out.println("encontre un comentario de una linea " + yytext());
            }
            // fall through
          case 32: break;
          case 11:
            { System.out.println("encontre un numero Real " + yytext());
            }
            // fall through
          case 33: break;
          case 12:
            { System.out.println("encontre una tabulacion");
            }
            // fall through
          case 34: break;
          case 13:
            { System.out.println("encontre un comentario de varias lineas " + yytext());
            }
            // fall through
          case 35: break;
          case 14:
            { System.out.println("encontre un Real " + yytext());
            }
            // fall through
          case 36: break;
          case 15:
            { System.out.println("encontre una funcion " + yytext());  
    System.out.println("encontre un parentesis " + yytext());
    System.out.println("encontre una Identificador " + yytext());
            }
            // fall through
          case 37: break;
          case 16:
            { System.out.println("encontre una cadena " + yytext());
            }
            // fall through
          case 38: break;
          case 17:
            { System.out.println("encontre un entero ");
    String caden = yytext();
    caden = caden.substring(7,caden.length()-1);
    System.out.println(caden);
            }
            // fall through
          case 39: break;
          case 18:
            { System.out.println("encontre un boleano " + yytext());
            }
            // fall through
          case 40: break;
          case 19:
            { System.out.println("encontre una funcion Aritmetica REAL " + yytext());  
    System.out.println("encontre una palabra reservada" + yytext());
    System.out.println("encontre un parentesis " + yytext());
    System.out.println("encontre un IDENTIFICADOR " + yytext());
            }
            // fall through
          case 41: break;
          case 20:
            { System.out.println("encontre una funcion especial REAL " + yytext());  
    System.out.println("encontre un identificador" + yytext());
    System.out.println("encontre un parentesis " + yytext());
    System.out.println("encontre un IDENTIFICADOR " + yytext());
            }
            // fall through
          case 42: break;
          case 21:
            { System.out.println("encontre una funcion especial ENTERA " + yytext());  
    System.out.println("encontre una palabra reservada" + yytext());
    System.out.println("encontre un IDENTIFICADOR" + yytext());
    System.out.println("encontre un parentesis " + yytext());
            }
            // fall through
          case 43: break;
          case 22:
            { System.out.println("encontre una funcion especial BOLEANA " + yytext());  
    System.out.println("encontre una palabra reservada" + yytext());
    System.out.println("encontre un parentesis " + yytext());
    System.out.println("encontre un IDENTIFICADOR " + yytext());
            }
            // fall through
          case 44: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Proyecto [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Proyecto scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Proyecto(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
