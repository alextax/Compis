
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.alex.compis;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\004\004\000\002\005\004\000" +
    "\002\005\006\000\002\005\003\000\002\024\005\000\002" +
    "\024\005\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\006\006\000\002\006\007\000\002\007\003\000" +
    "\002\007\004\000\002\011\004\000\002\011\005\000\002" +
    "\014\004\000\002\014\005\000\002\015\004\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\005\000\002\017\007\000\002" +
    "\020\005\000\002\021\005\000\002\012\004\000\002\012" +
    "\006\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\024\004\015\006\024\011\023\012\020\013" +
    "\005\014\004\023\017\024\012\025\021\001\002\000\004" +
    "\020\uffd5\001\002\000\004\020\uffd4\001\002\000\024\004" +
    "\015\006\024\011\023\012\020\013\005\014\004\023\017" +
    "\024\012\025\021\001\002\000\004\002\110\001\002\000" +
    "\026\002\ufffb\004\015\006\024\011\023\012\020\013\005" +
    "\014\004\023\017\024\012\025\021\001\002\000\004\020" +
    "\075\001\002\000\010\026\073\027\072\030\070\001\002" +
    "\000\024\004\015\006\024\011\023\012\020\013\005\014" +
    "\004\023\017\024\012\025\021\001\002\000\004\002\000" +
    "\001\002\000\004\005\066\001\002\000\030\002\uffec\004" +
    "\uffec\006\uffec\011\uffec\012\uffec\013\uffec\014\uffec\023\uffec" +
    "\024\uffec\025\uffec\037\037\001\002\000\004\020\uffd3\001" +
    "\002\000\004\020\uffd6\001\002\000\010\031\035\032\034" +
    "\033\033\001\002\000\024\004\ufff7\006\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\023\ufff7\024\ufff7\025\ufff7\001\002" +
    "\000\004\020\uffd7\001\002\000\004\010\027\001\002\000" +
    "\024\004\015\006\024\011\023\012\020\013\005\014\004" +
    "\023\017\024\012\025\021\001\002\000\004\002\ufffd\001" +
    "\002\000\026\004\ufff9\006\ufff9\007\030\011\ufff9\012\ufff9" +
    "\013\ufff9\014\ufff9\023\ufff9\024\ufff9\025\ufff9\001\002\000" +
    "\004\010\031\001\002\000\024\004\ufff8\006\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\023\ufff8\024\ufff8\025\ufff8\001" +
    "\002\000\004\034\036\001\002\000\004\034\uffef\001\002" +
    "\000\004\034\ufff0\001\002\000\004\034\ufff1\001\002\000" +
    "\024\004\ufff5\006\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\001\002\000\016\005\046\016" +
    "\045\017\044\020\042\035\043\036\047\001\002\000\026" +
    "\002\uffeb\004\uffeb\006\uffeb\011\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\001\002\000\026\002\uffde" +
    "\004\uffde\006\uffde\011\uffde\012\uffde\013\uffde\014\uffde\023" +
    "\uffde\024\uffde\025\uffde\001\002\000\006\021\054\040\053" +
    "\001\002\000\026\002\uffe4\004\uffe4\006\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\023\uffe4\024\uffe4\025\uffe4\001\002" +
    "\000\026\002\uffe1\004\uffe1\006\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\023\uffe1\024\uffe1\025\uffe1\001\002\000\026" +
    "\002\uffe2\004\uffe2\006\uffe2\011\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\001\002\000\026\002\uffe3" +
    "\004\uffe3\006\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\001\002\000\026\002\uffe5\004\uffe5" +
    "\006\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\001\002\000\026\002\uffe0\004\uffe0\006\uffe0" +
    "\011\uffe0\012\uffe0\013\uffe0\014\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\001\002\000\026\002\uffdf\004\uffdf\006\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\023\uffdf\024\uffdf\025\uffdf\001" +
    "\002\000\026\002\uffe6\004\uffe6\006\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\023\uffe6\024\uffe6\025\uffe6\001\002\000" +
    "\004\020\064\001\002\000\006\020\055\022\056\001\002" +
    "\000\004\015\060\001\002\000\026\002\uffdd\004\uffdd\006" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\001\002\000\004\022\063\001\002\000\004\020" +
    "\061\001\002\000\034\002\uffe8\004\uffe8\006\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\060\022\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\037\uffe8\001\002\000\032\002\uffe7\004\uffe7" +
    "\006\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\037\uffe7\001\002\000\026\002\uffdc" +
    "\004\uffdc\006\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\001\002\000\030\002\uffdb\004\uffdb" +
    "\006\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\021\054\023" +
    "\uffdb\024\uffdb\025\uffdb\001\002\000\026\002\uffda\004\uffda" +
    "\006\uffda\011\uffda\012\uffda\013\uffda\014\uffda\023\uffda\024" +
    "\uffda\025\uffda\001\002\000\024\004\ufffa\006\ufffa\011\ufffa" +
    "\012\ufffa\013\ufffa\014\ufffa\023\ufffa\024\ufffa\025\ufffa\001" +
    "\002\000\004\002\ufffe\001\002\000\004\034\ufff2\001\002" +
    "\000\004\034\074\001\002\000\004\034\ufff3\001\002\000" +
    "\004\034\ufff4\001\002\000\024\004\ufff6\006\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\023\ufff6\024\ufff6\025\ufff6\001" +
    "\002\000\034\002\uffea\004\uffea\006\uffea\011\uffea\012\uffea" +
    "\013\uffea\014\uffea\015\060\021\077\023\uffea\024\uffea\025" +
    "\uffea\037\uffea\001\002\000\030\002\uffe9\004\uffe9\006\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\037\uffe9\001\002\000\016\011\023\012\020\013\005" +
    "\014\004\022\101\023\017\001\002\000\004\022\106\001" +
    "\002\000\024\004\uffee\006\uffee\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\023\uffee\024\uffee\025\uffee\001\002\000\004\020" +
    "\103\001\002\000\006\015\104\022\uffd9\001\002\000\014" +
    "\011\023\012\020\013\005\014\004\023\017\001\002\000" +
    "\004\022\uffd8\001\002\000\024\004\uffed\006\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\023\uffed\024\uffed\025\uffed\001" +
    "\002\000\004\002\ufffc\001\002\000\004\002\001\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\024\002\006\003\013\004\005\005\012\006" +
    "\024\007\007\010\010\011\015\024\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\110\004\005\005" +
    "\012\006\024\007\007\010\010\011\015\024\021\001\001" +
    "\000\002\001\001\000\022\003\106\004\005\005\012\006" +
    "\024\007\007\010\010\011\015\024\021\001\001\000\002" +
    "\001\001\000\004\022\070\001\001\000\022\003\066\004" +
    "\005\005\012\006\024\007\007\010\010\011\015\024\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\025\004\005\005\012\006\024" +
    "\007\007\010\010\011\015\024\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\051\017\047" +
    "\020\050\021\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\064\001\001\000\002\001\001\000\004\014\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\075\001\001\000\002\001\001\000\006\010\101\012" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\101\012\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= programa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= RBIBLIOTECAS programa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= CLASE programa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= FUNCION programa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa ::= CODIGOG programa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // programa ::= CODIGOG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RBIBLIOTECAS ::= incluir texto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RBIBLIOTECAS",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CLASE ::= clase identificadorC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CLASE ::= clase identificadorC extiende identificadorC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASE ::= CONTENIDOCLASE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDOCLASE ::= propiedades TIPOPROPIEDADES dosPuntos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDOCLASE ::= metodos TIPOMETODOS dosPuntos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPOPROPIEDADES ::= publicas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOPROPIEDADES",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPOPROPIEDADES ::= privadas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOPROPIEDADES",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPOPROPIEDADES ::= protegidas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOPROPIEDADES",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPOMETODOS ::= publicos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODOS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPOMETODOS ::= privados 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODOS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPOMETODOS ::= protegidos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODOS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCION ::= TIPOF identificadorVF parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCION ::= TIPOF identificadorVF parentesisA ARG parentesisC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CODIGOG ::= DECLARARVARIABLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGOG",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CODIGOG ::= DECLARARVARIABLE IGUALAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGOG",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARARVARIABLE ::= TIPOF identificadorVF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARARVARIABLE ::= TIPOF identificadorVF MASVARIABLES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MASVARIABLES ::= coma identificadorVF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MASVARIABLES",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MASVARIABLES ::= coma identificadorVF MASVARIABLES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MASVARIABLES",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IGUALAR ::= igual IGUALACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALAR",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IGUALACION ::= numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IGUALACION ::= numeroR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IGUALACION ::= texto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IGUALACION ::= verdadero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IGUALACION ::= falso 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IGUALACION ::= LLAMARFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IGUALACION ::= LLAMARVARIABLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IGUALACION ::= LLAMARFUNCIONCLASE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LLAMARFUNCION ::= identificadorVF parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMARFUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LLAMARFUNCION ::= identificadorVF parentesisA identificadorVF MASVARIABLES parentesisC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMARFUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LLAMARVARIABLE ::= identificadorVF punto identificadorVF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMARVARIABLE",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LLAMARFUNCIONCLASE ::= identificadorVF punto LLAMARFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMARFUNCIONCLASE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARG ::= TIPOF identificadorVF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARG",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARG ::= TIPOF identificadorVF coma ARG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARG",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPOF ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOF ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPOF ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOF ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPOF ::= nulo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
