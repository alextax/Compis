
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.alex.compis;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\004\004\000\002\005\004\000" +
    "\002\005\006\000\002\005\003\000\002\037\005\000\002" +
    "\037\005\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\006\006\000\002\006\007\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\032\003\000\002" +
    "\032\004\000\002\032\003\000\002\032\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\004\000" +
    "\002\052\010\000\002\054\004\000\002\054\005\000\002" +
    "\053\003\000\002\053\005\000\002\045\011\000\002\050" +
    "\003\000\002\050\004\000\002\047\003\000\002\047\003" +
    "\000\002\046\003\000\002\046\004\000\002\046\004\000" +
    "\002\046\005\000\002\034\005\000\002\035\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\006\000\002\036" +
    "\005\000\002\011\004\000\002\011\005\000\002\014\004" +
    "\000\002\014\005\000\002\015\004\000\002\016\003\000" +
    "\002\016\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\043\005\000\002\043\005\000\002\043\005\000" +
    "\002\043\004\000\002\043\003\000\002\043\003\000\002" +
    "\044\005\000\002\044\005\000\002\024\005\000\002\024" +
    "\005\000\002\017\004\000\002\020\005\000\002\021\005" +
    "\000\002\012\004\000\002\012\006\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\040\006\000\002\040\004\000\002\025" +
    "\003\000\002\025\003\000\002\026\004\000\002\030\003" +
    "\000\002\030\005\000\002\027\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\050\004\020\006\027\010\004\011\035\012" +
    "\021\013\014\014\054\020\052\023\015\024\045\025\017" +
    "\034\007\047\022\050\031\051\023\053\053\057\006\060" +
    "\024\063\044\001\002\000\004\020\236\001\002\000\052" +
    "\002\uffe7\004\uffe7\006\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\020\uffe7\023\uffe7\024\uffe7\025\uffe7\034\uffe7" +
    "\047\uffe7\050\uffe7\051\uffe7\053\uffe7\057\uffe7\060\uffe7\063" +
    "\uffe7\001\002\000\016\011\035\012\021\013\014\014\054" +
    "\020\221\023\015\001\002\000\022\005\061\016\064\017" +
    "\062\020\056\036\063\037\065\042\074\043\060\001\002" +
    "\000\004\002\217\001\002\000\004\002\000\001\002\000" +
    "\052\002\uffe6\004\uffe6\006\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\020\uffe6\023\uffe6\024\uffe6\025\uffe6\034" +
    "\uffe6\047\uffe6\050\uffe6\051\uffe6\053\uffe6\057\uffe6\060\uffe6" +
    "\063\uffe6\001\002\000\050\004\020\006\027\010\004\011" +
    "\035\012\021\013\014\014\054\020\052\023\015\024\045" +
    "\025\017\034\007\047\022\050\031\051\023\053\053\057" +
    "\006\060\024\063\044\001\002\000\004\020\uffa8\001\002" +
    "\000\004\020\uffa7\001\002\000\004\020\201\001\002\000" +
    "\010\031\177\032\176\033\175\001\002\000\004\005\173" +
    "\001\002\000\004\020\uffaa\001\002\000\016\005\061\016" +
    "\064\017\062\020\056\036\063\037\065\001\002\000\022" +
    "\005\061\016\064\017\062\020\056\036\063\037\065\042" +
    "\074\043\060\001\002\000\022\005\061\016\064\017\062" +
    "\020\056\036\063\037\065\042\074\043\060\001\002\000" +
    "\052\002\uffe2\004\uffe2\006\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\020\uffe2\023\uffe2\024\uffe2\025\uffe2\034" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\053\uffe2\057\uffe2\060\uffe2" +
    "\063\uffe2\001\002\000\052\002\uffe3\004\uffe3\006\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\020\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\034\uffe3\047\uffe3\050\uffe3\051\uffe3\053" +
    "\uffe3\057\uffe3\060\uffe3\063\uffe3\001\002\000\004\010\161" +
    "\001\002\000\052\002\uffe5\004\uffe5\006\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\020\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\034\uffe5\047\uffe5\050\uffe5\051\uffe5\053\uffe5\057" +
    "\uffe5\060\uffe5\063\uffe5\001\002\000\004\020\160\001\002" +
    "\000\052\002\uffe4\004\uffe4\006\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\020\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\034\uffe4\047\uffe4\050\uffe4\051\uffe4\053\uffe4\057\uffe4\060" +
    "\uffe4\063\uffe4\001\002\000\050\004\020\006\027\010\004" +
    "\011\035\012\021\013\014\014\054\020\052\023\015\024" +
    "\045\025\017\034\007\047\022\050\031\051\023\053\053" +
    "\057\006\060\024\063\044\001\002\000\052\002\ufffb\004" +
    "\020\006\027\010\004\011\035\012\021\013\014\014\054" +
    "\020\052\023\015\024\045\025\017\034\007\047\022\050" +
    "\031\051\023\053\053\057\006\060\024\063\044\001\002" +
    "\000\004\020\uffab\001\002\000\052\002\uffa3\004\uffa3\006" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\020\uffa3" +
    "\023\uffa3\024\uffa3\025\uffa3\034\uffa3\047\uffa3\050\uffa3\051" +
    "\uffa3\053\uffa3\057\uffa3\060\uffa3\063\uffa3\001\002\000\052" +
    "\002\uffa4\004\uffa4\006\uffa4\010\uffa4\011\uffa4\012\uffa4\013" +
    "\uffa4\014\uffa4\020\uffa4\023\uffa4\024\uffa4\025\uffa4\034\uffa4" +
    "\047\uffa4\050\uffa4\051\uffa4\053\uffa4\057\uffa4\060\uffa4\063" +
    "\uffa4\001\002\000\050\004\020\006\027\010\004\011\035" +
    "\012\021\013\014\014\054\020\052\023\015\024\045\025" +
    "\017\034\007\047\022\050\031\051\023\053\053\057\006" +
    "\060\024\063\044\001\002\000\050\004\ufff7\006\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\020\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\034\ufff7\047\ufff7\050\ufff7\051\ufff7\053" +
    "\ufff7\057\ufff7\060\ufff7\063\ufff7\001\002\000\054\002\uffe9" +
    "\004\uffe9\006\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\020\uffe9\023\uffe9\024\uffe9\025\uffe9\034\uffe9\040\142" +
    "\047\uffe9\050\uffe9\051\uffe9\053\uffe9\057\uffe9\060\uffe9\063" +
    "\uffe9\001\002\000\052\002\uffe1\004\uffe1\006\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\020\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\034\uffe1\047\uffe1\050\uffe1\051\uffe1\053\uffe1" +
    "\057\uffe1\060\uffe1\063\uffe1\001\002\000\052\002\uffd8\004" +
    "\uffd8\006\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\020\uffd8\023\uffd8\024\uffd8\025\uffd8\034\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\053\uffd8\057\uffd8\060\uffd8\063\uffd8\001\002" +
    "\000\010\026\152\027\151\030\147\001\002\000\052\002" +
    "\uffea\004\uffea\006\uffea\010\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\020\uffea\023\uffea\024\uffea\025\uffea\034\uffea\047" +
    "\uffea\050\uffea\051\uffea\053\uffea\057\uffea\060\uffea\063\uffea" +
    "\001\002\000\052\002\uffeb\004\uffeb\006\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\020\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\034\uffeb\047\uffeb\050\uffeb\051\uffeb\053\uffeb\057" +
    "\uffeb\060\uffeb\063\uffeb\001\002\000\052\002\uffec\004\uffec" +
    "\006\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\020" +
    "\uffec\023\uffec\024\uffec\025\uffec\034\uffec\047\uffec\050\uffec" +
    "\051\uffec\053\uffec\057\uffec\060\uffec\063\uffec\001\002\000" +
    "\052\002\uffe0\004\uffe0\006\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\020\uffe0\023\uffe0\024\uffe0\025\uffe0\034" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\053\uffe0\057\uffe0\060\uffe0" +
    "\063\uffe0\001\002\000\010\021\130\040\142\041\141\001" +
    "\002\000\022\005\061\016\064\017\062\020\056\036\063" +
    "\037\065\042\074\043\060\001\002\000\004\020\uffa9\001" +
    "\002\000\106\002\uffbc\004\uffbc\006\uffbc\010\uffbc\011\uffbc" +
    "\012\uffbc\013\uffbc\014\uffbc\015\uffbc\020\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\025\uffbc\034\uffbc\040\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\063\uffbc\001\002\000\112\002\uffbb\004" +
    "\uffbb\006\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\020\uffbb\021\130\022\uffbb\023\uffbb\024\uffbb\025" +
    "\uffbb\034\uffbb\040\uffbb\041\126\042\uffbb\043\uffbb\044\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb" +
    "\062\uffbb\063\uffbb\001\002\000\070\002\uffb6\004\uffb6\006" +
    "\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\020\uffb6" +
    "\023\uffb6\024\uffb6\025\uffb6\034\uffb6\040\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6" +
    "\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\001\002\000" +
    "\016\005\061\016\064\017\062\020\056\036\063\037\065" +
    "\001\002\000\106\002\uffc1\004\uffc1\006\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\020\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\034\uffc1\040\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\001\002\000\106\002\uffbf" +
    "\004\uffbf\006\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\020\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\034\uffbf\040\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf" +
    "\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\001\002\000\106\002\uffc2\004\uffc2\006\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\020\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\034\uffc2\040\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\060\uffc2\061\uffc2\062\uffc2\063\uffc2\001\002\000\106\002" +
    "\uffc0\004\uffc0\006\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\020\uffc0\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\034\uffc0\040\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0" +
    "\063\uffc0\001\002\000\106\002\uffc3\004\uffc3\006\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\020\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\034\uffc3\040\uffc3\042" +
    "\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\001\002\000\106" +
    "\002\uffbe\004\uffbe\006\uffbe\010\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\020\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\034\uffbe\040\uffbe\042\uffbe\043\uffbe\044\uffbe\045" +
    "\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062" +
    "\uffbe\063\uffbe\001\002\000\106\002\uffbd\004\uffbd\006\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\020" +
    "\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\034\uffbd\040\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\001\002\000" +
    "\102\002\uffc5\004\uffc5\006\uffc5\010\uffc5\011\uffc5\012\uffc5" +
    "\013\uffc5\014\uffc5\020\uffc5\023\uffc5\024\uffc5\025\uffc5\034" +
    "\uffc5\040\uffc5\042\113\043\115\044\112\045\114\046\116" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055" +
    "\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5" +
    "\001\002\000\070\002\uffb5\004\uffb5\006\uffb5\010\uffb5\011" +
    "\uffb5\012\uffb5\013\uffb5\014\uffb5\020\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\034\uffb5\040\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5" +
    "\061\uffb5\062\uffb5\063\uffb5\001\002\000\012\040\101\054" +
    "\104\055\102\056\103\001\002\000\070\002\uffc4\004\uffc4" +
    "\006\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\020" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\034\uffc4\040\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056" +
    "\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\001\002" +
    "\000\004\042\077\001\002\000\004\052\076\001\002\000" +
    "\052\002\uffcf\004\uffcf\006\uffcf\010\uffcf\011\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\020\uffcf\023\uffcf\024\uffcf\025\uffcf\034" +
    "\uffcf\047\uffcf\050\uffcf\051\uffcf\053\uffcf\057\uffcf\060\uffcf" +
    "\063\uffcf\001\002\000\016\005\061\016\064\017\062\020" +
    "\056\036\063\037\065\001\002\000\070\002\uffb2\004\uffb2" +
    "\006\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\020" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\034\uffb2\040\uffb2\047\uffb2" +
    "\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056" +
    "\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\001\002" +
    "\000\004\040\110\001\002\000\022\005\061\016\064\017" +
    "\062\020\056\036\063\037\065\042\074\043\060\001\002" +
    "\000\022\005\061\016\064\017\062\020\056\036\063\037" +
    "\065\042\074\043\060\001\002\000\022\005\061\016\064" +
    "\017\062\020\056\036\063\037\065\042\074\043\060\001" +
    "\002\000\060\002\uffcd\004\uffcd\006\uffcd\010\uffcd\011\uffcd" +
    "\012\uffcd\013\uffcd\014\uffcd\020\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\034\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\001\002\000" +
    "\060\002\uffcb\004\uffcb\006\uffcb\010\uffcb\011\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\020\uffcb\023\uffcb\024\uffcb\025\uffcb\034" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\057\uffcb" +
    "\060\uffcb\061\uffcb\062\uffcb\063\uffcb\001\002\000\060\002" +
    "\uffce\004\uffce\006\uffce\010\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\020\uffce\023\uffce\024\uffce\025\uffce\034\uffce\047" +
    "\uffce\050\uffce\051\uffce\052\uffce\053\uffce\057\uffce\060\uffce" +
    "\061\uffce\062\uffce\063\uffce\001\002\000\022\005\061\016" +
    "\064\017\062\020\056\036\063\037\065\042\074\043\060" +
    "\001\002\000\060\002\uffcc\004\uffcc\006\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\020\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\034\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\001\002" +
    "\000\016\005\061\016\064\017\062\020\056\036\063\037" +
    "\065\001\002\000\016\005\061\016\064\017\062\020\056" +
    "\036\063\037\065\001\002\000\016\005\061\016\064\017" +
    "\062\020\056\036\063\037\065\001\002\000\020\005\061" +
    "\016\064\017\062\020\056\036\063\037\065\043\120\001" +
    "\002\000\016\005\061\016\064\017\062\020\056\036\063" +
    "\037\065\001\002\000\070\002\uffb3\004\uffb3\006\uffb3\010" +
    "\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\020\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\034\uffb3\040\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\060\uffb3\061\uffb3\062\uffb3\063\uffb3\001\002\000\070\002" +
    "\uffb1\004\uffb1\006\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1" +
    "\014\uffb1\020\uffb1\023\uffb1\024\uffb1\025\uffb1\034\uffb1\040" +
    "\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\001\002\000\070\002\uffb9\004\uffb9\006\uffb9\010\uffb9" +
    "\011\uffb9\012\uffb9\013\uffb9\014\uffb9\020\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\034\uffb9\040\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\001\002\000\070\002\uffb4" +
    "\004\uffb4\006\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014" +
    "\uffb4\020\uffb4\023\uffb4\024\uffb4\025\uffb4\034\uffb4\040\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4" +
    "\001\002\000\070\002\uffba\004\uffba\006\uffba\010\uffba\011" +
    "\uffba\012\uffba\013\uffba\014\uffba\020\uffba\023\uffba\024\uffba" +
    "\025\uffba\034\uffba\040\uffba\047\uffba\050\uffba\051\uffba\052" +
    "\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba" +
    "\061\uffba\062\uffba\063\uffba\001\002\000\070\002\uffb8\004" +
    "\uffb8\006\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\020\uffb8\023\uffb8\024\uffb8\025\uffb8\034\uffb8\040\uffb8\047" +
    "\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8" +
    "\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\001" +
    "\002\000\070\002\uffb7\004\uffb7\006\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\020\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\034\uffb7\040\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061" +
    "\uffb7\062\uffb7\063\uffb7\001\002\000\004\020\137\001\002" +
    "\000\106\002\uffb0\004\uffb0\006\uffb0\010\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\020\uffb0\022\uffb0\023\uffb0" +
    "\024\uffb0\025\uffb0\034\uffb0\040\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061" +
    "\uffb0\062\uffb0\063\uffb0\001\002\000\020\005\061\016\064" +
    "\017\062\020\056\022\131\036\063\037\065\001\002\000" +
    "\106\002\uffdd\004\uffdd\006\uffdd\010\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\020\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\034\uffdd\040\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd" +
    "\062\uffdd\063\uffdd\001\002\000\004\022\136\001\002\000" +
    "\006\015\134\022\uffdb\001\002\000\016\005\061\016\064" +
    "\017\062\020\056\036\063\037\065\001\002\000\004\022" +
    "\uffda\001\002\000\106\002\uffdc\004\uffdc\006\uffdc\010\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\020\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\034\uffdc\040\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc" +
    "\060\uffdc\061\uffdc\062\uffdc\063\uffdc\001\002\000\110\002" +
    "\uffaf\004\uffaf\006\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf" +
    "\014\uffaf\015\uffaf\020\uffaf\021\130\022\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\034\uffaf\040\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\062\uffaf\063\uffaf\001\002\000\106\002\uffae\004\uffae\006" +
    "\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae" +
    "\020\uffae\022\uffae\023\uffae\024\uffae\025\uffae\034\uffae\040" +
    "\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae" +
    "\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056" +
    "\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\001\002" +
    "\000\004\020\145\001\002\000\022\005\061\016\064\017" +
    "\062\020\056\036\063\037\065\042\074\043\060\001\002" +
    "\000\052\002\uffa5\004\uffa5\006\uffa5\010\uffa5\011\uffa5\012" +
    "\uffa5\013\uffa5\014\uffa5\020\uffa5\023\uffa5\024\uffa5\025\uffa5" +
    "\034\uffa5\047\uffa5\050\uffa5\051\uffa5\053\uffa5\057\uffa5\060" +
    "\uffa5\063\uffa5\001\002\000\052\002\uffc6\004\uffc6\006\uffc6" +
    "\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\020\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\034\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\053\uffc6\057\uffc6\060\uffc6\063\uffc6\001\002\000\004\040" +
    "\142\001\002\000\052\002\uffa6\004\uffa6\006\uffa6\010\uffa6" +
    "\011\uffa6\012\uffa6\013\uffa6\014\uffa6\020\uffa6\023\uffa6\024" +
    "\uffa6\025\uffa6\034\uffa6\047\uffa6\050\uffa6\051\uffa6\053\uffa6" +
    "\057\uffa6\060\uffa6\063\uffa6\001\002\000\004\035\ufff2\001" +
    "\002\000\004\035\153\001\002\000\004\035\ufff3\001\002" +
    "\000\004\035\ufff4\001\002\000\050\004\ufff6\006\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\020\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\034\ufff6\047\ufff6\050\ufff6\051\ufff6\053" +
    "\ufff6\057\ufff6\060\ufff6\063\ufff6\001\002\000\052\002\uffe8" +
    "\004\uffe8\006\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\020\uffe8\023\uffe8\024\uffe8\025\uffe8\034\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\053\uffe8\057\uffe8\060\uffe8\063\uffe8\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\ufffc\001\002" +
    "\000\004\002\ufffe\001\002\000\052\002\uff9f\004\uff9f\006" +
    "\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\020\uff9f" +
    "\023\uff9f\024\uff9f\025\uff9f\034\uff9f\047\uff9f\050\uff9f\051" +
    "\uff9f\053\uff9f\057\uff9f\060\uff9f\063\uff9f\001\002\000\052" +
    "\004\ufff9\006\ufff9\007\162\010\ufff9\011\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\020\ufff9\023\ufff9\024\ufff9\025\ufff9\034\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\053\ufff9\057\ufff9\060\ufff9\063" +
    "\ufff9\001\002\000\004\010\163\001\002\000\050\004\ufff8" +
    "\006\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\020" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\034\ufff8\047\ufff8\050\ufff8" +
    "\051\ufff8\053\ufff8\057\ufff8\060\ufff8\063\ufff8\001\002\000" +
    "\052\002\uffd7\004\uffd7\006\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\020\uffd7\023\uffd7\024\uffd7\025\uffd7\034" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\053\uffd7\057\uffd7\060\uffd7" +
    "\063\uffd7\001\002\000\004\052\166\001\002\000\052\002" +
    "\uffd0\004\uffd0\006\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\020\uffd0\023\uffd0\024\uffd0\025\uffd0\034\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\053\uffd0\057\uffd0\060\uffd0\063\uffd0" +
    "\001\002\000\052\002\uffa2\004\uffa2\006\uffa2\010\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\020\uffa2\023\uffa2\024\uffa2" +
    "\025\uffa2\034\uffa2\047\uffa2\050\uffa2\051\uffa2\053\uffa2\057" +
    "\uffa2\060\uffa2\063\uffa2\001\002\000\054\002\uffa1\004\uffa1" +
    "\006\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015" +
    "\171\020\uffa1\023\uffa1\024\uffa1\025\uffa1\034\uffa1\047\uffa1" +
    "\050\uffa1\051\uffa1\053\uffa1\057\uffa1\060\uffa1\063\uffa1\001" +
    "\002\000\016\005\061\016\064\017\062\020\056\036\063" +
    "\037\065\001\002\000\052\002\uffa0\004\uffa0\006\uffa0\010" +
    "\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\020\uffa0\023\uffa0" +
    "\024\uffa0\025\uffa0\034\uffa0\047\uffa0\050\uffa0\051\uffa0\053" +
    "\uffa0\057\uffa0\060\uffa0\063\uffa0\001\002\000\050\004\ufffa" +
    "\006\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\020" +
    "\ufffa\023\ufffa\024\ufffa\025\ufffa\034\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\053\ufffa\057\ufffa\060\ufffa\063\ufffa\001\002\000" +
    "\004\035\200\001\002\000\004\035\uffef\001\002\000\004" +
    "\035\ufff0\001\002\000\004\035\ufff1\001\002\000\050\004" +
    "\ufff5\006\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\020\ufff5\023\ufff5\024\ufff5\025\ufff5\034\ufff5\047\ufff5\050" +
    "\ufff5\051\ufff5\053\ufff5\057\ufff5\060\ufff5\063\ufff5\001\002" +
    "\000\060\002\uffca\004\uffca\006\uffca\010\uffca\011\uffca\012" +
    "\uffca\013\uffca\014\uffca\015\203\020\uffca\021\204\023\uffca" +
    "\024\uffca\025\uffca\034\uffca\040\uffca\047\uffca\050\uffca\051" +
    "\uffca\053\uffca\057\uffca\060\uffca\063\uffca\001\002\000\054" +
    "\002\uffc9\004\uffc9\006\uffc9\010\uffc9\011\uffc9\012\uffc9\013" +
    "\uffc9\014\uffc9\020\uffc9\023\uffc9\024\uffc9\025\uffc9\034\uffc9" +
    "\040\uffc9\047\uffc9\050\uffc9\051\uffc9\053\uffc9\057\uffc9\060" +
    "\uffc9\063\uffc9\001\002\000\004\020\214\001\002\000\016" +
    "\011\035\012\021\013\014\014\054\022\207\023\015\001" +
    "\002\000\004\022\213\001\002\000\004\020\210\001\002" +
    "\000\050\004\uffee\006\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\020\uffee\023\uffee\024\uffee\025\uffee\034\uffee" +
    "\047\uffee\050\uffee\051\uffee\053\uffee\057\uffee\060\uffee\063" +
    "\uffee\001\002\000\006\015\211\022\uffad\001\002\000\014" +
    "\011\035\012\021\013\014\014\054\023\015\001\002\000" +
    "\004\022\uffac\001\002\000\050\004\uffed\006\uffed\010\uffed" +
    "\011\uffed\012\uffed\013\uffed\014\uffed\020\uffed\023\uffed\024" +
    "\uffed\025\uffed\034\uffed\047\uffed\050\uffed\051\uffed\053\uffed" +
    "\057\uffed\060\uffed\063\uffed\001\002\000\056\002\uffc8\004" +
    "\uffc8\006\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\203\020\uffc8\023\uffc8\024\uffc8\025\uffc8\034\uffc8\040" +
    "\uffc8\047\uffc8\050\uffc8\051\uffc8\053\uffc8\057\uffc8\060\uffc8" +
    "\063\uffc8\001\002\000\054\002\uffc7\004\uffc7\006\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\020\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\034\uffc7\040\uffc7\047\uffc7\050\uffc7\051" +
    "\uffc7\053\uffc7\057\uffc7\060\uffc7\063\uffc7\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\001\001\002\000\052\002" +
    "\uffdf\004\uffdf\006\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\020\uffdf\023\uffdf\024\uffdf\025\uffdf\034\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\053\uffdf\057\uffdf\060\uffdf\063\uffdf" +
    "\001\002\000\006\040\142\060\uffd4\001\002\000\004\020" +
    "\233\001\002\000\004\060\224\001\002\000\022\005\061" +
    "\016\064\017\062\020\056\036\063\037\065\042\074\043" +
    "\060\001\002\000\006\061\227\062\226\001\002\000\016" +
    "\005\uffd5\016\uffd5\017\uffd5\020\uffd5\036\uffd5\037\uffd5\001" +
    "\002\000\016\005\uffd6\016\uffd6\017\uffd6\020\uffd6\036\uffd6" +
    "\037\uffd6\001\002\000\016\005\061\016\064\017\062\020" +
    "\056\036\063\037\065\001\002\000\004\063\232\001\002" +
    "\000\052\002\uffd9\004\uffd9\006\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\020\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\034\uffd9\047\uffd9\050\uffd9\051\uffd9\053\uffd9\057\uffd9\060" +
    "\uffd9\063\uffd9\001\002\000\006\040\142\060\uffd3\001\002" +
    "\000\004\060\uffd1\001\002\000\004\060\uffd2\001\002\000" +
    "\004\040\237\001\002\000\004\064\240\001\002\000\004" +
    "\010\241\001\002\000\004\021\130\001\002\000\052\002" +
    "\uffde\004\uffde\006\uffde\010\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\020\uffde\023\uffde\024\uffde\025\uffde\034\uffde\047" +
    "\uffde\050\uffde\051\uffde\053\uffde\057\uffde\060\uffde\063\uffde" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\056\002\007\003\010\004\037\005\032\006" +
    "\012\007\033\010\015\011\041\017\050\025\011\026\035" +
    "\027\036\032\047\033\046\034\027\035\031\037\040\040" +
    "\004\045\025\050\024\051\045\052\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\221\046\222\001" +
    "\001\000\022\016\217\017\065\020\066\021\054\024\056" +
    "\042\067\043\072\044\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\003\215\004\037" +
    "\005\032\006\012\007\033\010\015\011\041\017\050\025" +
    "\011\026\035\027\036\032\047\033\046\034\027\035\031" +
    "\037\040\040\004\045\025\050\024\051\045\052\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\065\020\066\021\054\030\166\042\167" +
    "\001\001\000\024\016\071\017\065\020\066\021\054\024" +
    "\056\036\164\042\067\043\072\044\070\001\001\000\024" +
    "\016\071\017\065\020\066\021\054\024\056\036\163\042" +
    "\067\043\072\044\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\003\156\004\037\005\032" +
    "\006\012\007\033\010\015\011\041\017\050\025\011\026" +
    "\035\027\036\032\047\033\046\034\027\035\031\037\040" +
    "\040\004\045\025\050\024\051\045\052\042\001\001\000" +
    "\054\003\155\004\037\005\032\006\012\007\033\010\015" +
    "\011\041\017\050\025\011\026\035\027\036\032\047\033" +
    "\046\034\027\035\031\037\040\040\004\045\025\050\024" +
    "\051\045\052\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\003\154\004\037\005\032" +
    "\006\012\007\033\010\015\011\041\017\050\025\011\026" +
    "\035\027\036\032\047\033\046\034\027\035\031\037\040" +
    "\040\004\045\025\050\024\051\045\052\042\001\001\000" +
    "\002\001\001\000\004\015\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\142\054\126\001\001\000\024\016\071\017" +
    "\065\020\066\021\054\024\056\036\074\042\067\043\072" +
    "\044\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\126\001\001\000\002\001\001\000\012\017\065" +
    "\020\066\021\054\042\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\065\020\066\021\054\042\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\106\017\065\020" +
    "\066\021\054\024\056\042\067\043\072\044\070\001\001" +
    "\000\022\016\105\017\065\020\066\021\054\024\056\042" +
    "\067\043\072\044\070\001\001\000\022\016\104\017\065" +
    "\020\066\021\054\024\056\042\067\043\072\044\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\110\017\065\020\066\021\054\024\056\042" +
    "\067\043\072\044\070\001\001\000\002\001\001\000\012" +
    "\017\065\020\066\021\054\042\123\001\001\000\012\017" +
    "\065\020\066\021\054\042\122\001\001\000\012\017\065" +
    "\020\066\021\054\042\121\001\001\000\012\017\065\020" +
    "\066\021\054\042\120\001\001\000\012\017\065\020\066" +
    "\021\054\042\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\137\001" +
    "\001\000\002\001\001\000\014\017\065\020\066\021\054" +
    "\042\132\053\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\065\020\066\021\054" +
    "\042\132\053\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\143\017\065\020\066\021\054\024" +
    "\056\042\067\043\072\044\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\065\020" +
    "\066\021\054\030\171\042\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\205\012\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\205\012\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\016" +
    "\071\017\065\020\066\021\054\024\056\036\224\042\067" +
    "\043\072\044\070\001\001\000\004\047\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\065\020\066" +
    "\021\054\042\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\241\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= programa 
            {
              Object RESULT =null;
		 System.out.println("---------DEPURACION COMPLETADA, EL PROGRAMA NO CONTIENE ERRORES---------");  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= RBIBLIOTECAS programa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= CLASE programa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= FUNCION programa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa ::= CODIGOG programa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // programa ::= CODIGOG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RBIBLIOTECAS ::= incluir texto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RBIBLIOTECAS",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CLASE ::= clase identificadorC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CLASE ::= clase identificadorC extiende identificadorC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASE ::= CONTENIDOCLASE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDOCLASE ::= propiedades TIPOPROPIEDADES dosPuntos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASE",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDOCLASE ::= metodos TIPOMETODOS dosPuntos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASE",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPOPROPIEDADES ::= publicas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOPROPIEDADES",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPOPROPIEDADES ::= privadas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOPROPIEDADES",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPOPROPIEDADES ::= protegidas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOPROPIEDADES",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPOMETODOS ::= publicos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODOS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPOMETODOS ::= privados 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODOS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPOMETODOS ::= protegidos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODOS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCION ::= TIPOF identificadorVF parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCION ::= TIPOF identificadorVF parentesisA ARG parentesisC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CODIGOG ::= CODIGOSA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGOG",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CODIGOG ::= CODIGOSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGOG",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CODIGOG ::= CODIGOSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGOG",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CODIGOSA ::= DECLARARVARIABLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGOSA",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CODIGOSA ::= DECLARARVARIABLE IGUALAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGOSA",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CODIGOSA ::= ASIGNAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGOSA",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CODIGOSA ::= E_S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGOSA",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CODIGOSB ::= SELECTIVA_SI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGOSB",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CODIGOSB ::= SELECTIVA_SINO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGOSB",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CODIGOSB ::= ITERATIVA1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGOSB",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CODIGOSB ::= ITERATIVA2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGOSB",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CODIGOSC ::= INSTANCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGOSC",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CODIGOSC ::= LLAMARFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGOSC",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CODIGOSC ::= devolver IGUALACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGOSC",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTANCIA ::= identificadorC identificadorVF igual instanciar identificadorC PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIA",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMETROS ::= parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETROS ::= parentesisA ENVIAR parentesisC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ENVIAR ::= IGUALACIONS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENVIAR",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ENVIAR ::= IGUALACIONS coma ENVIAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENVIAR",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ITERATIVA1 ::= desde INI mientras CONDICION DEC IGUALACIONS hacer 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ITERATIVA1",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ITERATIVA2 ::= hacer 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ITERATIVA2",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ITERATIVA2 ::= mientras CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ITERATIVA2",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DEC ::= incrementar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DEC ::= decrementar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INI ::= identificadorVF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INI",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INI ::= TIPOF identificadorVF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INI",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INI ::= identificadorVF IGUALAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INI",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INI ::= TIPOF identificadorVF IGUALAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INI",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SELECTIVA_SI ::= si CONDICION entonces 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECTIVA_SI",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SELECTIVA_SINO ::= sino CONDICION entonces 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECTIVA_SINO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICION ::= IGUALACION menor IGUALACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICION ::= IGUALACION mayor IGUALACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICION ::= IGUALACION igual igual IGUALACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICION ::= IGUALACION noigual IGUALACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARARVARIABLE ::= TIPOF identificadorVF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARARVARIABLE ::= TIPOF identificadorVF MASVARIABLES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MASVARIABLES ::= coma identificadorVF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MASVARIABLES",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MASVARIABLES ::= coma identificadorVF MASVARIABLES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MASVARIABLES",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IGUALAR ::= igual IGUALACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALAR",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IGUALACION ::= IGUALACIONS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IGUALACION ::= OPERACIONBASICA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IGUALACIONS ::= numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACIONS",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IGUALACIONS ::= numeroR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACIONS",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IGUALACIONS ::= texto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACIONS",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IGUALACIONS ::= verdadero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACIONS",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IGUALACIONS ::= falso 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACIONS",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IGUALACIONS ::= LLAMARFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACIONS",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IGUALACIONS ::= LLAMARVARIABLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACIONS",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IGUALACIONS ::= LLAMARFUNCIONCLASE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACIONS",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IGUALACIONS ::= identificadorVF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACIONS",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERACIONBASICA ::= IGUALACIONS mas IGUALACIONS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONBASICA",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERACIONBASICA ::= IGUALACIONS menos IGUALACIONS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONBASICA",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERACIONBASICA ::= IGUALACIONS operadorA IGUALACIONS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONBASICA",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERACIONBASICA ::= menos IGUALACIONS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONBASICA",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERACIONBASICA ::= PREPOST 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONBASICA",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERACIONBASICA ::= OPERACIONLOGICA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONBASICA",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERACIONLOGICA ::= IGUALACIONS and IGUALACIONS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICA",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERACIONLOGICA ::= IGUALACIONS or IGUALACIONS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICA",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PREPOST ::= mas mas IGUALACIONS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PREPOST",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PREPOST ::= IGUALACIONS menos menos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PREPOST",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LLAMARFUNCION ::= identificadorVF PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMARFUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LLAMARVARIABLE ::= identificadorVF punto identificadorVF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMARVARIABLE",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LLAMARFUNCIONCLASE ::= identificadorVF punto LLAMARFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMARFUNCIONCLASE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ARG ::= TIPOF identificadorVF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARG",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ARG ::= TIPOF identificadorVF coma ARG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARG",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIPOF ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIPOF ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TIPOF ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPOF ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPOF ::= nulo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ASIGNAR ::= identificadorVF punto identificadorVF IGUALAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ASIGNAR ::= identificadorVF IGUALAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E_S ::= LECTURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E_S",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E_S ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E_S",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ESCRITURA ::= escribir DATOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DATOS ::= IGUALACIONS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATOS",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DATOS ::= IGUALACIONS coma DATOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATOS",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LECTURA ::= leer identificadorVF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LECTURA",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
